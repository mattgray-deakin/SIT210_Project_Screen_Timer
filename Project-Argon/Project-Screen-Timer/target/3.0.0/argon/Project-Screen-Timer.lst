
e:/Project_Folder/SIT210_Project_Screen_Timer/Project-Argon/Project-Screen-Timer/target/3.0.0/argon/Project-Screen-Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002044  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6060  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e6b0  000d6064  0001e6b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000d8  2003e718  2003e718  0002e718  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d60cc  000d60cc  000260cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d60f4  000d60f4  000260f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0015c27d  00000000  00000000  000260f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00014d38  00000000  00000000  00182375  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00034364  00000000  00000000  001970ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002780  00000000  00000000  001cb411  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008f28  00000000  00000000  001cdb91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000354f5  00000000  00000000  001d6ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00038485  00000000  00000000  0020bfae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001267d9  00000000  00000000  00244433  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006f58  00000000  00000000  0036ac0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fd6f 	bl	d5b10 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fd77 	bl	d5b2c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e6b0 	.word	0x2003e6b0
   d4048:	000d6064 	.word	0x000d6064
   d404c:	2003e718 	.word	0x2003e718
   d4050:	2003e718 	.word	0x2003e718
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 ff37 	bl	d4ed0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d6030 	.word	0x000d6030
   d407c:	000d6054 	.word	0x000d6054

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b816 	b.w	d40b0 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f9dd 	bl	d4444 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bee1 	b.w	d4e54 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bcb1 	b.w	d49f8 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bcaf 	b.w	d49f8 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bcb5 	b.w	d4a08 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <setup>:
// Publish counter - Once this reaches 20, read_device_data procedure will send a device update to Particle Cloud
int publish_counter = 0;

// Setup Serial1 (Not the USB Connection! This is using RX(D10),TX(D9) and GND for UART) and the I2C LCD Display
void setup(void)
{
   d40b0:	b538      	push	{r3, r4, r5, lr}
  Serial1.begin(9600);
   d40b2:	f001 fb31 	bl	d5718 <_Z22__fetch_global_Serial1v>
   d40b6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40ba:	f001 fb29 	bl	d5710 <_ZN11USARTSerial5beginEm>
  lcd = new LiquidCrystal_I2C(0x27, 20, 4);
   d40be:	2010      	movs	r0, #16
   d40c0:	f7ff ffe7 	bl	d4092 <_Znwj>
   d40c4:	4604      	mov	r4, r0
   d40c6:	b120      	cbz	r0, d40d2 <setup+0x22>
   d40c8:	2304      	movs	r3, #4
   d40ca:	2214      	movs	r2, #20
   d40cc:	2127      	movs	r1, #39	; 0x27
   d40ce:	f000 f9c9 	bl	d4464 <_ZN17LiquidCrystal_I2CC1Ehhh>
   d40d2:	4d08      	ldr	r5, [pc, #32]	; (d40f4 <setup+0x44>)
  lcd->init();
   d40d4:	4620      	mov	r0, r4
  lcd = new LiquidCrystal_I2C(0x27, 20, 4);
   d40d6:	602c      	str	r4, [r5, #0]
  lcd->init();
   d40d8:	f000 fad8 	bl	d468c <_ZN17LiquidCrystal_I2C4initEv>
  lcd->backlight();
   d40dc:	6828      	ldr	r0, [r5, #0]
   d40de:	f000 f9eb 	bl	d44b8 <_ZN17LiquidCrystal_I2C9backlightEv>
  lcd->clear();
   d40e2:	6828      	ldr	r0, [r5, #0]
   d40e4:	f000 fa26 	bl	d4534 <_ZN17LiquidCrystal_I2C5clearEv>
  lcd->print("Screen Timer Init");
   d40e8:	6828      	ldr	r0, [r5, #0]
   d40ea:	4903      	ldr	r1, [pc, #12]	; (d40f8 <setup+0x48>)
}
   d40ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  lcd->print("Screen Timer Init");
   d40f0:	f000 be22 	b.w	d4d38 <_ZN5Print5printEPKc>
   d40f4:	2003e720 	.word	0x2003e720
   d40f8:	000d5d00 	.word	0x000d5d00

000d40fc <_Z11ser_recievev>:

// Procedure to Recieve Data via the Serial Interface using the [data] protocol
void ser_recieve()
{
   d40fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static byte index = 0;                                                    // Start with an index of 0 for the array
  char data_starter = '[';                                                  // Start Character for data
  char data_ender = ']';                                                    // End Character for data
  char rx_char;                                                             // Storage for the currently recieved character

  while (Serial1.available() > 0 && datarcv == false)                       // Check if there is Serial data, and we have not just finished recieving data (Ignores data after a ']')
   d40fe:	4e16      	ldr	r6, [pc, #88]	; (d4158 <_Z11ser_recievev+0x5c>)
  {
    rx_char = Serial1.read();                                               // Read the char in

    if (receiving_data == true)                                             // If currently recieving data then
   d4100:	4f16      	ldr	r7, [pc, #88]	; (d415c <_Z11ser_recievev+0x60>)
   d4102:	4c17      	ldr	r4, [pc, #92]	; (d4160 <_Z11ser_recievev+0x64>)
  while (Serial1.available() > 0 && datarcv == false)                       // Check if there is Serial data, and we have not just finished recieving data (Ignores data after a ']')
   d4104:	f001 fb08 	bl	d5718 <_Z22__fetch_global_Serial1v>
   d4108:	6803      	ldr	r3, [r0, #0]
   d410a:	691b      	ldr	r3, [r3, #16]
   d410c:	4798      	blx	r3
   d410e:	2800      	cmp	r0, #0
   d4110:	dd20      	ble.n	d4154 <_Z11ser_recievev+0x58>
   d4112:	7835      	ldrb	r5, [r6, #0]
   d4114:	b9f5      	cbnz	r5, d4154 <_Z11ser_recievev+0x58>
    rx_char = Serial1.read();                                               // Read the char in
   d4116:	f001 faff 	bl	d5718 <_Z22__fetch_global_Serial1v>
   d411a:	6803      	ldr	r3, [r0, #0]
   d411c:	695b      	ldr	r3, [r3, #20]
   d411e:	4798      	blx	r3
    if (receiving_data == true)                                             // If currently recieving data then
   d4120:	783b      	ldrb	r3, [r7, #0]
    rx_char = Serial1.read();                                               // Read the char in
   d4122:	b2c0      	uxtb	r0, r0
    if (receiving_data == true)                                             // If currently recieving data then
   d4124:	b18b      	cbz	r3, d414a <_Z11ser_recievev+0x4e>
    {

      if (rx_char != data_ender)                                            // Check if the character was the end of a string of data, if it isn't add it to the string and increment index
   d4126:	285d      	cmp	r0, #93	; 0x5d
   d4128:	7823      	ldrb	r3, [r4, #0]
   d412a:	4a0e      	ldr	r2, [pc, #56]	; (d4164 <_Z11ser_recievev+0x68>)
   d412c:	d007      	beq.n	d413e <_Z11ser_recievev+0x42>
      {
        ser_rcv[index] = rx_char;
   d412e:	54d0      	strb	r0, [r2, r3]
        index++;
   d4130:	3301      	adds	r3, #1
   d4132:	b2db      	uxtb	r3, r3

        if (index >= char_max)                                     // If we have hit maximum character limit, ignore
   d4134:	2b27      	cmp	r3, #39	; 0x27
   d4136:	d900      	bls.n	d413a <_Z11ser_recievev+0x3e>
        {
          index = char_max - 1;
   d4138:	2327      	movs	r3, #39	; 0x27
        index++;
   d413a:	7023      	strb	r3, [r4, #0]
   d413c:	e7e2      	b.n	d4104 <_Z11ser_recievev+0x8>
        }
      }

      else                                                         // If it is the data ender - End of the string.  Stop receiving data reset the index and set the new serial data flag to true.
      {
        ser_rcv[index] = '\0';
   d413e:	54d5      	strb	r5, [r2, r3]
        receiving_data = false;
        index = 0;
        datarcv = true;
   d4140:	2301      	movs	r3, #1
        receiving_data = false;
   d4142:	703d      	strb	r5, [r7, #0]
        index = 0;
   d4144:	7025      	strb	r5, [r4, #0]
        datarcv = true;
   d4146:	7033      	strb	r3, [r6, #0]
   d4148:	e7dc      	b.n	d4104 <_Z11ser_recievev+0x8>
      }
    }

    else if (rx_char == data_starter)                               // If data not yet being recieved, check if this is that start character.  If it is, start recieving the data.
   d414a:	285b      	cmp	r0, #91	; 0x5b
   d414c:	d1da      	bne.n	d4104 <_Z11ser_recievev+0x8>
    {
      receiving_data = true;
   d414e:	2301      	movs	r3, #1
   d4150:	703b      	strb	r3, [r7, #0]
   d4152:	e7d7      	b.n	d4104 <_Z11ser_recievev+0x8>
    }
  }
  
}
   d4154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4156:	bf00      	nop
   d4158:	2003e71f 	.word	0x2003e71f
   d415c:	2003e71d 	.word	0x2003e71d
   d4160:	2003e71e 	.word	0x2003e71e
   d4164:	2003e728 	.word	0x2003e728

000d4168 <_Z13clear_displayv>:
  datarcv = false;

}

// Procedure to clear the LCD
void clear_display(){
   d4168:	b510      	push	{r4, lr}
  lcd->clear();
   d416a:	4c0c      	ldr	r4, [pc, #48]	; (d419c <_Z13clear_displayv+0x34>)
   d416c:	6820      	ldr	r0, [r4, #0]
   d416e:	f000 f9e1 	bl	d4534 <_ZN17LiquidCrystal_I2C5clearEv>
  lcd->setCursor(3, 0);
   d4172:	6820      	ldr	r0, [r4, #0]
   d4174:	2200      	movs	r2, #0
   d4176:	2103      	movs	r1, #3
   d4178:	f000 f9f0 	bl	d455c <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd->print("Awaiting Data");
   d417c:	4908      	ldr	r1, [pc, #32]	; (d41a0 <_Z13clear_displayv+0x38>)
   d417e:	6820      	ldr	r0, [r4, #0]
   d4180:	f000 fdda 	bl	d4d38 <_ZN5Print5printEPKc>
  lcd->setCursor(3, 2);
   d4184:	6820      	ldr	r0, [r4, #0]
   d4186:	2103      	movs	r1, #3
   d4188:	2202      	movs	r2, #2
   d418a:	f000 f9e7 	bl	d455c <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd->print("Or no Devices");
   d418e:	6820      	ldr	r0, [r4, #0]
   d4190:	4904      	ldr	r1, [pc, #16]	; (d41a4 <_Z13clear_displayv+0x3c>)
}
   d4192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  lcd->print("Or no Devices");
   d4196:	f000 bdcf 	b.w	d4d38 <_ZN5Print5printEPKc>
   d419a:	bf00      	nop
   d419c:	2003e720 	.word	0x2003e720
   d41a0:	000d5d12 	.word	0x000d5d12
   d41a4:	000d5d20 	.word	0x000d5d20

000d41a8 <_Z12display_datai6Stringi>:
Display Device Data to the LCD Display
index - index of the device - used to position on the display (0 will display at top, 1 on second line, etc)
name - the name of the device
time - time remaining in seconds
*/
void display_data(int index, String name, int time){
   d41a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  lcd->setCursor(0, index);
   d41ac:	4d11      	ldr	r5, [pc, #68]	; (d41f4 <_Z12display_datai6Stringi+0x4c>)
void display_data(int index, String name, int time){
   d41ae:	4616      	mov	r6, r2
   d41b0:	460f      	mov	r7, r1
  lcd->setCursor(0, index);
   d41b2:	b2c2      	uxtb	r2, r0
   d41b4:	2100      	movs	r1, #0
   d41b6:	6828      	ldr	r0, [r5, #0]
   d41b8:	f000 f9d0 	bl	d455c <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd->print((time / 60));            // Time converted into minutes
   d41bc:	243c      	movs	r4, #60	; 0x3c
   d41be:	fb96 f4f4 	sdiv	r4, r6, r4
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d41c2:	363b      	adds	r6, #59	; 0x3b
   d41c4:	f8d5 8000 	ldr.w	r8, [r5]
   d41c8:	da12      	bge.n	d41f0 <_Z12display_datai6Stringi+0x48>
            t = print('-');
   d41ca:	212d      	movs	r1, #45	; 0x2d
   d41cc:	4640      	mov	r0, r8
   d41ce:	f000 fdb7 	bl	d4d40 <_ZN5Print5printEc>
            val = -n;
   d41d2:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d41d4:	220a      	movs	r2, #10
   d41d6:	4640      	mov	r0, r8
   d41d8:	f000 fdcb 	bl	d4d72 <_ZN5Print11printNumberEmh>
  lcd->print(" min ");
   d41dc:	4906      	ldr	r1, [pc, #24]	; (d41f8 <_Z12display_datai6Stringi+0x50>)
   d41de:	6828      	ldr	r0, [r5, #0]
   d41e0:	f000 fdaa 	bl	d4d38 <_ZN5Print5printEPKc>
  lcd->print(name);
   d41e4:	6839      	ldr	r1, [r7, #0]
   d41e6:	6828      	ldr	r0, [r5, #0]
}
   d41e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  lcd->print(name);
   d41ec:	f000 bda4 	b.w	d4d38 <_ZN5Print5printEPKc>
            val = n;
   d41f0:	4621      	mov	r1, r4
   d41f2:	e7ef      	b.n	d41d4 <_Z12display_datai6Stringi+0x2c>
   d41f4:	2003e720 	.word	0x2003e720
   d41f8:	000d5d2e 	.word	0x000d5d2e

000d41fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d41fc:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d41fe:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4200:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4202:	b17c      	cbz	r4, d4224 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4204:	6863      	ldr	r3, [r4, #4]
   d4206:	3b01      	subs	r3, #1
   d4208:	6063      	str	r3, [r4, #4]
   d420a:	b95b      	cbnz	r3, d4224 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d420c:	6823      	ldr	r3, [r4, #0]
   d420e:	4620      	mov	r0, r4
   d4210:	689b      	ldr	r3, [r3, #8]
   d4212:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4214:	68a3      	ldr	r3, [r4, #8]
   d4216:	3b01      	subs	r3, #1
   d4218:	60a3      	str	r3, [r4, #8]
   d421a:	b91b      	cbnz	r3, d4224 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d421c:	6823      	ldr	r3, [r4, #0]
   d421e:	4620      	mov	r0, r4
   d4220:	68db      	ldr	r3, [r3, #12]
   d4222:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4224:	4628      	mov	r0, r5
   d4226:	bd38      	pop	{r3, r4, r5, pc}

000d4228 <_Z16read_device_datav>:
void read_device_data(){
   d4228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d422c:	b08e      	sub	sp, #56	; 0x38
  String name, pub_str;
   d422e:	493b      	ldr	r1, [pc, #236]	; (d431c <_Z16read_device_datav+0xf4>)
      if (datarcv == true){                           // Confirm there is serial data, if not .. wait
   d4230:	4c3b      	ldr	r4, [pc, #236]	; (d4320 <_Z16read_device_datav+0xf8>)
        index = atoi(ser_rcv);                        // change the serial string to an integer
   d4232:	f8df 80f0 	ldr.w	r8, [pc, #240]	; d4324 <_Z16read_device_datav+0xfc>
  String name, pub_str;
   d4236:	a802      	add	r0, sp, #8
   d4238:	f000 fcc5 	bl	d4bc6 <_ZN6StringC1EPKc>
   d423c:	4937      	ldr	r1, [pc, #220]	; (d431c <_Z16read_device_datav+0xf4>)
   d423e:	a806      	add	r0, sp, #24
   d4240:	f000 fcc1 	bl	d4bc6 <_ZN6StringC1EPKc>
  name = "";
   d4244:	4935      	ldr	r1, [pc, #212]	; (d431c <_Z16read_device_datav+0xf4>)
   d4246:	a802      	add	r0, sp, #8
   d4248:	f000 fceb 	bl	d4c22 <_ZN6StringaSEPKc>
  delay(2000);      // Random short delay to load up Serial Data in the buffer
   d424c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4250:	f000 fdc6 	bl	d4de0 <delay>
  if (time_ck == 0 ){                                 // Confirm if a remaining time for this device has been recieved ... if not we can start these loops
   d4254:	4627      	mov	r7, r4
      ser_recieve();                                  // Recieve serial data
   d4256:	f7ff ff51 	bl	d40fc <_Z11ser_recievev>
      if (datarcv == true){                           // Confirm there is serial data, if not .. wait
   d425a:	7823      	ldrb	r3, [r4, #0]
   d425c:	2b00      	cmp	r3, #0
   d425e:	d0fa      	beq.n	d4256 <_Z16read_device_datav+0x2e>
        index = atoi(ser_rcv);                        // change the serial string to an integer
   d4260:	4830      	ldr	r0, [pc, #192]	; (d4324 <_Z16read_device_datav+0xfc>)
   d4262:	f001 fc43 	bl	d5aec <atoi>
        datarcv = false;                              // Data is used, flip the flag for new serial data back
   d4266:	2300      	movs	r3, #0
        if (index != -1) {                            // If there is a new value in index, change the flag to exit the loop
   d4268:	1c42      	adds	r2, r0, #1
        index = atoi(ser_rcv);                        // change the serial string to an integer
   d426a:	4605      	mov	r5, r0
        datarcv = false;                              // Data is used, flip the flag for new serial data back
   d426c:	7023      	strb	r3, [r4, #0]
        ser_rcv[0] = '\0';                            // Clear the serial recieve string once applied
   d426e:	f888 3000 	strb.w	r3, [r8]
        if (index != -1) {                            // If there is a new value in index, change the flag to exit the loop
   d4272:	d0f0      	beq.n	d4256 <_Z16read_device_datav+0x2e>
        name = ser_rcv;                               // Load data into the name string
   d4274:	f8df 90ac 	ldr.w	r9, [pc, #172]	; d4324 <_Z16read_device_datav+0xfc>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4278:	f8df a0a0 	ldr.w	sl, [pc, #160]	; d431c <_Z16read_device_datav+0xf4>
        datarcv = false;
   d427c:	461e      	mov	r6, r3
      ser_recieve();                                  // Recieve the serial data
   d427e:	f7ff ff3d 	bl	d40fc <_Z11ser_recievev>
      if (datarcv == true){                             
   d4282:	783b      	ldrb	r3, [r7, #0]
   d4284:	2b00      	cmp	r3, #0
   d4286:	d0fa      	beq.n	d427e <_Z16read_device_datav+0x56>
        name = ser_rcv;                               // Load data into the name string
   d4288:	4649      	mov	r1, r9
   d428a:	a802      	add	r0, sp, #8
   d428c:	f000 fcc9 	bl	d4c22 <_ZN6StringaSEPKc>
   d4290:	4651      	mov	r1, sl
   d4292:	a802      	add	r0, sp, #8
        datarcv = false;
   d4294:	703e      	strb	r6, [r7, #0]
        ser_rcv[0] = '\0';
   d4296:	f888 6000 	strb.w	r6, [r8]
   d429a:	f000 fcd4 	bl	d4c46 <_ZNK6String6equalsEPKc>
        if (name != ""){
   d429e:	4604      	mov	r4, r0
   d42a0:	2800      	cmp	r0, #0
   d42a2:	d1ec      	bne.n	d427e <_Z16read_device_datav+0x56>
        time = atoi(ser_rcv);
   d42a4:	f8df 907c 	ldr.w	r9, [pc, #124]	; d4324 <_Z16read_device_datav+0xfc>
      ser_recieve();
   d42a8:	f7ff ff28 	bl	d40fc <_Z11ser_recievev>
      if (datarcv == true){
   d42ac:	783b      	ldrb	r3, [r7, #0]
   d42ae:	2b00      	cmp	r3, #0
   d42b0:	d0fa      	beq.n	d42a8 <_Z16read_device_datav+0x80>
        time = atoi(ser_rcv);
   d42b2:	4648      	mov	r0, r9
   d42b4:	f001 fc1a 	bl	d5aec <atoi>
        if (time != -1){
   d42b8:	1c43      	adds	r3, r0, #1
        time = atoi(ser_rcv);
   d42ba:	4606      	mov	r6, r0
        datarcv = false;
   d42bc:	703c      	strb	r4, [r7, #0]
        ser_rcv[0] = '\0';
   d42be:	f888 4000 	strb.w	r4, [r8]
        if (time != -1){
   d42c2:	d0f1      	beq.n	d42a8 <_Z16read_device_datav+0x80>
    if (index < 4){                                   // Only four lines on LCD, therefore can only show 4 devices at once
   d42c4:	2d03      	cmp	r5, #3
   d42c6:	dc0b      	bgt.n	d42e0 <_Z16read_device_datav+0xb8>
      display_data(index, name, time);                // Send data to the LCD using display dat procedure
   d42c8:	a902      	add	r1, sp, #8
   d42ca:	a80a      	add	r0, sp, #40	; 0x28
   d42cc:	f000 fc9e 	bl	d4c0c <_ZN6StringC1ERKS_>
   d42d0:	4628      	mov	r0, r5
   d42d2:	4632      	mov	r2, r6
   d42d4:	a90a      	add	r1, sp, #40	; 0x28
   d42d6:	f7ff ff67 	bl	d41a8 <_Z12display_datai6Stringi>
   d42da:	a80a      	add	r0, sp, #40	; 0x28
   d42dc:	f000 fc28 	bl	d4b30 <_ZN6StringD1Ev>
    publish_counter++;                                // Update the publish counter
   d42e0:	4c11      	ldr	r4, [pc, #68]	; (d4328 <_Z16read_device_datav+0x100>)
   d42e2:	6823      	ldr	r3, [r4, #0]
   d42e4:	3301      	adds	r3, #1
    if (publish_counter == 20){                       // If the counter is at 20, send a message to Particle Cloud, and reset the timer
   d42e6:	2b14      	cmp	r3, #20
    publish_counter++;                                // Update the publish counter
   d42e8:	6023      	str	r3, [r4, #0]
    if (publish_counter == 20){                       // If the counter is at 20, send a message to Particle Cloud, and reset the timer
   d42ea:	d10e      	bne.n	d430a <_Z16read_device_datav+0xe2>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d42ec:	4b0f      	ldr	r3, [pc, #60]	; (d432c <_Z16read_device_datav+0x104>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d42ee:	9a02      	ldr	r2, [sp, #8]
   d42f0:	781b      	ldrb	r3, [r3, #0]
   d42f2:	490f      	ldr	r1, [pc, #60]	; (d4330 <_Z16read_device_datav+0x108>)
   d42f4:	f88d 3000 	strb.w	r3, [sp]
   d42f8:	a80a      	add	r0, sp, #40	; 0x28
   d42fa:	233c      	movs	r3, #60	; 0x3c
   d42fc:	f000 ff40 	bl	d5180 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4300:	a80b      	add	r0, sp, #44	; 0x2c
   d4302:	f7ff ff7b 	bl	d41fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      publish_counter = 0;
   d4306:	2300      	movs	r3, #0
   d4308:	6023      	str	r3, [r4, #0]
  String name, pub_str;
   d430a:	a806      	add	r0, sp, #24
   d430c:	f000 fc10 	bl	d4b30 <_ZN6StringD1Ev>
   d4310:	a802      	add	r0, sp, #8
   d4312:	f000 fc0d 	bl	d4b30 <_ZN6StringD1Ev>
}
   d4316:	b00e      	add	sp, #56	; 0x38
   d4318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d431c:	000d5d33 	.word	0x000d5d33
   d4320:	2003e71f 	.word	0x2003e71f
   d4324:	2003e728 	.word	0x2003e728
   d4328:	2003e724 	.word	0x2003e724
   d432c:	2003e71c 	.word	0x2003e71c
   d4330:	000d5d34 	.word	0x000d5d34

000d4334 <_Z10send_alarmv>:
void send_alarm(){
   d4334:	b530      	push	{r4, r5, lr}
  lcd->clear();
   d4336:	4c19      	ldr	r4, [pc, #100]	; (d439c <_Z10send_alarmv+0x68>)
  String dev_at_limit;
   d4338:	4919      	ldr	r1, [pc, #100]	; (d43a0 <_Z10send_alarmv+0x6c>)
  dev_at_limit = ser_rcv;
   d433a:	4d1a      	ldr	r5, [pc, #104]	; (d43a4 <_Z10send_alarmv+0x70>)
void send_alarm(){
   d433c:	b089      	sub	sp, #36	; 0x24
  String dev_at_limit;
   d433e:	a804      	add	r0, sp, #16
   d4340:	f000 fc41 	bl	d4bc6 <_ZN6StringC1EPKc>
  lcd->clear();
   d4344:	6820      	ldr	r0, [r4, #0]
   d4346:	f000 f8f5 	bl	d4534 <_ZN17LiquidCrystal_I2C5clearEv>
  lcd->print("Device Overtime");
   d434a:	4917      	ldr	r1, [pc, #92]	; (d43a8 <_Z10send_alarmv+0x74>)
   d434c:	6820      	ldr	r0, [r4, #0]
   d434e:	f000 fcf3 	bl	d4d38 <_ZN5Print5printEPKc>
  ser_recieve();
   d4352:	f7ff fed3 	bl	d40fc <_Z11ser_recievev>
  dev_at_limit = ser_rcv;
   d4356:	4629      	mov	r1, r5
   d4358:	a804      	add	r0, sp, #16
   d435a:	f000 fc62 	bl	d4c22 <_ZN6StringaSEPKc>
  lcd->setCursor(0, 2);
   d435e:	6820      	ldr	r0, [r4, #0]
   d4360:	2202      	movs	r2, #2
   d4362:	2100      	movs	r1, #0
   d4364:	f000 f8fa 	bl	d455c <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd->print(dev_at_limit);
   d4368:	9904      	ldr	r1, [sp, #16]
   d436a:	6820      	ldr	r0, [r4, #0]
   d436c:	f000 fce4 	bl	d4d38 <_ZN5Print5printEPKc>
   d4370:	4b0e      	ldr	r3, [pc, #56]	; (d43ac <_Z10send_alarmv+0x78>)
   d4372:	9a04      	ldr	r2, [sp, #16]
   d4374:	781b      	ldrb	r3, [r3, #0]
   d4376:	490e      	ldr	r1, [pc, #56]	; (d43b0 <_Z10send_alarmv+0x7c>)
   d4378:	f88d 3000 	strb.w	r3, [sp]
   d437c:	a802      	add	r0, sp, #8
   d437e:	233c      	movs	r3, #60	; 0x3c
   d4380:	f000 fefe 	bl	d5180 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4384:	a803      	add	r0, sp, #12
   d4386:	f7ff ff39 	bl	d41fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  datarcv = false;
   d438a:	4a0a      	ldr	r2, [pc, #40]	; (d43b4 <_Z10send_alarmv+0x80>)
  ser_rcv[0] = '\0';                                  // Clear the Serial String and set the new data flag to false
   d438c:	2300      	movs	r3, #0
  String dev_at_limit;
   d438e:	a804      	add	r0, sp, #16
  ser_rcv[0] = '\0';                                  // Clear the Serial String and set the new data flag to false
   d4390:	702b      	strb	r3, [r5, #0]
  datarcv = false;
   d4392:	7013      	strb	r3, [r2, #0]
  String dev_at_limit;
   d4394:	f000 fbcc 	bl	d4b30 <_ZN6StringD1Ev>
}
   d4398:	b009      	add	sp, #36	; 0x24
   d439a:	bd30      	pop	{r4, r5, pc}
   d439c:	2003e720 	.word	0x2003e720
   d43a0:	000d5d33 	.word	0x000d5d33
   d43a4:	2003e728 	.word	0x2003e728
   d43a8:	000d5d3f 	.word	0x000d5d3f
   d43ac:	2003e71c 	.word	0x2003e71c
   d43b0:	000d5d4f 	.word	0x000d5d4f
   d43b4:	2003e71f 	.word	0x2003e71f

000d43b8 <_Z15serial_selectorv>:
void serial_selector(){
   d43b8:	b570      	push	{r4, r5, r6, lr}
  if (datarcv == true){
   d43ba:	4d1e      	ldr	r5, [pc, #120]	; (d4434 <_Z15serial_selectorv+0x7c>)
  ser_recieve();
   d43bc:	f7ff fe9e 	bl	d40fc <_Z11ser_recievev>
  if (datarcv == true){
   d43c0:	782b      	ldrb	r3, [r5, #0]
   d43c2:	b313      	cbz	r3, d440a <_Z15serial_selectorv+0x52>
    if (atoi (ser_rcv) == 1){                       // 1 - New Device Data, run to the read_device_data procedure to update the LCD
   d43c4:	4c1c      	ldr	r4, [pc, #112]	; (d4438 <_Z15serial_selectorv+0x80>)
   d43c6:	4620      	mov	r0, r4
   d43c8:	f001 fb90 	bl	d5aec <atoi>
   d43cc:	2801      	cmp	r0, #1
   d43ce:	d106      	bne.n	d43de <_Z15serial_selectorv+0x26>
      ser_rcv[0] = '\0';
   d43d0:	2300      	movs	r3, #0
   d43d2:	7023      	strb	r3, [r4, #0]
      datarcv = false;
   d43d4:	702b      	strb	r3, [r5, #0]
}
   d43d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      read_device_data();
   d43da:	f7ff bf25 	b.w	d4228 <_Z16read_device_datav>
    else if (atoi (ser_rcv) == 2){                  // 2 - A device is overtime, send the alarm to LCD and Particle Cloud
   d43de:	4620      	mov	r0, r4
   d43e0:	f001 fb84 	bl	d5aec <atoi>
   d43e4:	2802      	cmp	r0, #2
   d43e6:	d106      	bne.n	d43f6 <_Z15serial_selectorv+0x3e>
      ser_rcv[0] = '\0';
   d43e8:	2300      	movs	r3, #0
   d43ea:	7023      	strb	r3, [r4, #0]
      datarcv = false;
   d43ec:	702b      	strb	r3, [r5, #0]
}
   d43ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      send_alarm();
   d43f2:	f7ff bf9f 	b.w	d4334 <_Z10send_alarmv>
    else if (atoi (ser_rcv) == 3){                  // 3 - Clear the display as there are no devices being monitored anymore
   d43f6:	4620      	mov	r0, r4
   d43f8:	f001 fb78 	bl	d5aec <atoi>
   d43fc:	2803      	cmp	r0, #3
   d43fe:	d105      	bne.n	d440c <_Z15serial_selectorv+0x54>
      ser_rcv[0] = '\0';
   d4400:	2600      	movs	r6, #0
   d4402:	7026      	strb	r6, [r4, #0]
      clear_display();
   d4404:	f7ff feb0 	bl	d4168 <_Z13clear_displayv>
      datarcv = false;
   d4408:	702e      	strb	r6, [r5, #0]
}
   d440a:	bd70      	pop	{r4, r5, r6, pc}
    else if (atoi (ser_rcv) == 4){                  // 4 - Clear the display, as a change in data warrants a change in display information
   d440c:	4620      	mov	r0, r4
   d440e:	f001 fb6d 	bl	d5aec <atoi>
   d4412:	2804      	cmp	r0, #4
   d4414:	f04f 0600 	mov.w	r6, #0
   d4418:	d105      	bne.n	d4426 <_Z15serial_selectorv+0x6e>
      lcd->clear();
   d441a:	4b08      	ldr	r3, [pc, #32]	; (d443c <_Z15serial_selectorv+0x84>)
      ser_rcv[0] = '\0';
   d441c:	7026      	strb	r6, [r4, #0]
      lcd->clear();
   d441e:	6818      	ldr	r0, [r3, #0]
   d4420:	f000 f888 	bl	d4534 <_ZN17LiquidCrystal_I2C5clearEv>
      datarcv = false;
   d4424:	e7f0      	b.n	d4408 <_Z15serial_selectorv+0x50>
      Serial1.println("Error in Serial Selection"); // If there is an incorrect input, and error is sent to the serial interface
   d4426:	f001 f977 	bl	d5718 <_Z22__fetch_global_Serial1v>
   d442a:	4905      	ldr	r1, [pc, #20]	; (d4440 <_Z15serial_selectorv+0x88>)
   d442c:	f000 fc97 	bl	d4d5e <_ZN5Print7printlnEPKc>
      ser_rcv[0]='\0';
   d4430:	7026      	strb	r6, [r4, #0]
   d4432:	e7e9      	b.n	d4408 <_Z15serial_selectorv+0x50>
   d4434:	2003e71f 	.word	0x2003e71f
   d4438:	2003e728 	.word	0x2003e728
   d443c:	2003e720 	.word	0x2003e720
   d4440:	000d5d5d 	.word	0x000d5d5d

000d4444 <loop>:

// Main loop, only needs to run serial_selectore
void loop(void)
{
  serial_selector();
   d4444:	f7ff bfb8 	b.w	d43b8 <_Z15serial_selectorv>

000d4448 <_GLOBAL__sub_I_lcd>:
        val_(val) {
   d4448:	4b01      	ldr	r3, [pc, #4]	; (d4450 <_GLOBAL__sub_I_lcd+0x8>)
   d444a:	2200      	movs	r2, #0
   d444c:	701a      	strb	r2, [r3, #0]
   d444e:	4770      	bx	lr
   d4450:	2003e71c 	.word	0x2003e71c

000d4454 <_ZN17LiquidCrystal_I2CD1Ev>:

//#define En B00000100  // Enable bit
//#define Rw B00000010  // Read/Write bit
//#define Rs B00000001  // Register select bit

class LiquidCrystal_I2C : public Print {
   d4454:	4770      	bx	lr

000d4456 <_ZN17LiquidCrystal_I2CD0Ev>:
   d4456:	b510      	push	{r4, lr}
   d4458:	2110      	movs	r1, #16
   d445a:	4604      	mov	r4, r0
   d445c:	f001 fb3f 	bl	d5ade <_ZdlPvj>
   d4460:	4620      	mov	r0, r4
   d4462:	bd10      	pop	{r4, pc}

000d4464 <_ZN17LiquidCrystal_I2CC1Ehhh>:
#include "application.h"

#include "LiquidCrystal_I2C_Spark.h"


LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr,uint8_t lcd_cols,uint8_t lcd_rows)
   d4464:	b570      	push	{r4, r5, r6, lr}
    Print() : write_error(0) {}
   d4466:	2500      	movs	r5, #0
   d4468:	4e03      	ldr	r6, [pc, #12]	; (d4478 <_ZN17LiquidCrystal_I2CC1Ehhh+0x14>)
   d446a:	6045      	str	r5, [r0, #4]
   d446c:	6006      	str	r6, [r0, #0]
{
  _Addr = lcd_Addr;
   d446e:	7201      	strb	r1, [r0, #8]
  _cols = lcd_cols;
   d4470:	7342      	strb	r2, [r0, #13]
  _rows = lcd_rows;
   d4472:	7383      	strb	r3, [r0, #14]
  _backlightval = LCD_NOBACKLIGHT;
   d4474:	73c5      	strb	r5, [r0, #15]
}
   d4476:	bd70      	pop	{r4, r5, r6, pc}
   d4478:	000d5d80 	.word	0x000d5d80

000d447c <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
void LiquidCrystal_I2C::write4bits(uint8_t value) {
        expanderWrite(value);
        pulseEnable(value);
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){
   d447c:	b538      	push	{r3, r4, r5, lr}
   d447e:	4604      	mov	r4, r0
   d4480:	460d      	mov	r5, r1
        Wire.beginTransmission(_Addr);
   d4482:	f001 faff 	bl	d5a84 <_Z19__fetch_global_Wirev>
   d4486:	7a21      	ldrb	r1, [r4, #8]
   d4488:	f001 f9ea 	bl	d5860 <_ZN7TwoWire17beginTransmissionEh>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d448c:	2002      	movs	r0, #2
   d448e:	f000 f917 	bl	d46c0 <HAL_Delay_Microseconds>
        delayMicroseconds(2);
        Wire.write((int)(_data) | _backlightval);
   d4492:	f001 faf7 	bl	d5a84 <_Z19__fetch_global_Wirev>
   d4496:	7be1      	ldrb	r1, [r4, #15]
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4498:	6803      	ldr	r3, [r0, #0]
   d449a:	4329      	orrs	r1, r5
   d449c:	689b      	ldr	r3, [r3, #8]
   d449e:	4798      	blx	r3
   d44a0:	2002      	movs	r0, #2
   d44a2:	f000 f90d 	bl	d46c0 <HAL_Delay_Microseconds>
        delayMicroseconds(2);
        Wire.endTransmission();
   d44a6:	f001 faed 	bl	d5a84 <_Z19__fetch_global_Wirev>
   d44aa:	f001 f9e1 	bl	d5870 <_ZN7TwoWire15endTransmissionEv>
        delayMicroseconds(2);
        }
   d44ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d44b2:	2002      	movs	r0, #2
   d44b4:	f000 b904 	b.w	d46c0 <HAL_Delay_Microseconds>

000d44b8 <_ZN17LiquidCrystal_I2C9backlightEv>:
        _backlightval=LCD_BACKLIGHT;
   d44b8:	2308      	movs	r3, #8
   d44ba:	73c3      	strb	r3, [r0, #15]
        expanderWrite(0);
   d44bc:	2100      	movs	r1, #0
   d44be:	f7ff bfdd 	b.w	d447c <_ZN17LiquidCrystal_I2C13expanderWriteEh>

000d44c2 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:

void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
   d44c2:	b538      	push	{r3, r4, r5, lr}
   d44c4:	460c      	mov	r4, r1
        expanderWrite(_data | (1<<2));  // En high
   d44c6:	f041 0104 	orr.w	r1, r1, #4
void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
   d44ca:	4605      	mov	r5, r0
        expanderWrite(_data | (1<<2));  // En high
   d44cc:	f7ff ffd6 	bl	d447c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
   d44d0:	2001      	movs	r0, #1
   d44d2:	f000 f8f5 	bl	d46c0 <HAL_Delay_Microseconds>
        delayMicroseconds(1);           // enable pulse must be >450ns

        expanderWrite(_data & ~(1<<2)); // En low
   d44d6:	4628      	mov	r0, r5
   d44d8:	f004 01fb 	and.w	r1, r4, #251	; 0xfb
   d44dc:	f7ff ffce 	bl	d447c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        delayMicroseconds(50);          // commands need > 37us to settle
}
   d44e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d44e4:	2032      	movs	r0, #50	; 0x32
   d44e6:	f000 b8eb 	b.w	d46c0 <HAL_Delay_Microseconds>

000d44ea <_ZN17LiquidCrystal_I2C10write4bitsEh>:
void LiquidCrystal_I2C::write4bits(uint8_t value) {
   d44ea:	b538      	push	{r3, r4, r5, lr}
   d44ec:	4604      	mov	r4, r0
   d44ee:	460d      	mov	r5, r1
        expanderWrite(value);
   d44f0:	f7ff ffc4 	bl	d447c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        pulseEnable(value);
   d44f4:	4629      	mov	r1, r5
   d44f6:	4620      	mov	r0, r4
}
   d44f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pulseEnable(value);
   d44fc:	f7ff bfe1 	b.w	d44c2 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

000d4500 <_ZN17LiquidCrystal_I2C4sendEhh>:
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
   d4500:	b570      	push	{r4, r5, r6, lr}
   d4502:	460d      	mov	r5, r1
        uint8_t highnib=value&0xf0;
   d4504:	f021 010f 	bic.w	r1, r1, #15
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
   d4508:	4614      	mov	r4, r2
       write4bits((highnib)|mode);
   d450a:	4311      	orrs	r1, r2
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
   d450c:	4606      	mov	r6, r0
       write4bits((highnib)|mode);
   d450e:	f7ff ffec 	bl	d44ea <_ZN17LiquidCrystal_I2C10write4bitsEh>
        write4bits((lownib)|mode);
   d4512:	ea44 1105 	orr.w	r1, r4, r5, lsl #4
   d4516:	4630      	mov	r0, r6
   d4518:	b2c9      	uxtb	r1, r1
}
   d451a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        write4bits((lownib)|mode);
   d451e:	f7ff bfe4 	b.w	d44ea <_ZN17LiquidCrystal_I2C10write4bitsEh>

000d4522 <_ZN17LiquidCrystal_I2C5writeEh>:
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
   d4522:	b508      	push	{r3, lr}
        send(value, 1);
   d4524:	2201      	movs	r2, #1
   d4526:	f7ff ffeb 	bl	d4500 <_ZN17LiquidCrystal_I2C4sendEhh>
}
   d452a:	2000      	movs	r0, #0
   d452c:	bd08      	pop	{r3, pc}

000d452e <_ZN17LiquidCrystal_I2C7commandEh>:
        send(value, 0);
   d452e:	2200      	movs	r2, #0
   d4530:	f7ff bfe6 	b.w	d4500 <_ZN17LiquidCrystal_I2C4sendEhh>

000d4534 <_ZN17LiquidCrystal_I2C5clearEv>:
void LiquidCrystal_I2C::clear(){
   d4534:	b508      	push	{r3, lr}
        command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
   d4536:	2101      	movs	r1, #1
   d4538:	f7ff fff9 	bl	d452e <_ZN17LiquidCrystal_I2C7commandEh>
}
   d453c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4540:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4544:	f000 b8bc 	b.w	d46c0 <HAL_Delay_Microseconds>

000d4548 <_ZN17LiquidCrystal_I2C4homeEv>:
void LiquidCrystal_I2C::home(){
   d4548:	b508      	push	{r3, lr}
        command(LCD_RETURNHOME);  // set cursor position to zero
   d454a:	2102      	movs	r1, #2
   d454c:	f7ff ffef 	bl	d452e <_ZN17LiquidCrystal_I2C7commandEh>
}
   d4550:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4554:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4558:	f000 b8b2 	b.w	d46c0 <HAL_Delay_Microseconds>

000d455c <_ZN17LiquidCrystal_I2C9setCursorEhh>:
void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
   d455c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
   d455e:	4b0e      	ldr	r3, [pc, #56]	; (d4598 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x3c>)
void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
   d4560:	4606      	mov	r6, r0
   d4562:	4615      	mov	r5, r2
   d4564:	460c      	mov	r4, r1
        int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
   d4566:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   d4568:	f10d 0c10 	add.w	ip, sp, #16
   d456c:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
        if ( row > _numlines ) {
   d4570:	7b32      	ldrb	r2, [r6, #12]
   d4572:	42aa      	cmp	r2, r5
                row = _numlines-1;    // we count rows starting w/0
   d4574:	bf3c      	itt	cc
   d4576:	f102 32ff 	addcc.w	r2, r2, #4294967295
   d457a:	b2d5      	uxtbcc	r5, r2
        command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
   d457c:	ab04      	add	r3, sp, #16
   d457e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   d4582:	4630      	mov	r0, r6
   d4584:	f855 1c10 	ldr.w	r1, [r5, #-16]
   d4588:	4421      	add	r1, r4
   d458a:	f061 017f 	orn	r1, r1, #127	; 0x7f
   d458e:	b2c9      	uxtb	r1, r1
   d4590:	f7ff ffcd 	bl	d452e <_ZN17LiquidCrystal_I2C7commandEh>
}
   d4594:	b004      	add	sp, #16
   d4596:	bd70      	pop	{r4, r5, r6, pc}
   d4598:	000d5d90 	.word	0x000d5d90

000d459c <_ZN17LiquidCrystal_I2C7displayEv>:
void LiquidCrystal_I2C::display() {
   d459c:	b508      	push	{r3, lr}
        _displaycontrol |= LCD_DISPLAYON;
   d459e:	7a81      	ldrb	r1, [r0, #10]
   d45a0:	f041 0204 	orr.w	r2, r1, #4
   d45a4:	7282      	strb	r2, [r0, #10]
        command(LCD_DISPLAYCONTROL | _displaycontrol);
   d45a6:	f041 010c 	orr.w	r1, r1, #12
   d45aa:	f7ff ffc0 	bl	d452e <_ZN17LiquidCrystal_I2C7commandEh>
}
   d45ae:	bd08      	pop	{r3, pc}

000d45b0 <_ZN17LiquidCrystal_I2C5beginEhhh>:
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
   d45b0:	b510      	push	{r4, lr}
        if (lines > 1) {
   d45b2:	2a01      	cmp	r2, #1
                _displayfunction |= LCD_2LINE;
   d45b4:	bf88      	it	hi
   d45b6:	7a41      	ldrbhi	r1, [r0, #9]
        _numlines = lines;
   d45b8:	7302      	strb	r2, [r0, #12]
                _displayfunction |= LCD_2LINE;
   d45ba:	bf88      	it	hi
   d45bc:	f041 0108 	orrhi.w	r1, r1, #8
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
   d45c0:	4604      	mov	r4, r0
                _displayfunction |= LCD_2LINE;
   d45c2:	bf88      	it	hi
   d45c4:	7241      	strbhi	r1, [r0, #9]
        if ((dotsize != 0) && (lines == 1)) {
   d45c6:	b12b      	cbz	r3, d45d4 <_ZN17LiquidCrystal_I2C5beginEhhh+0x24>
   d45c8:	2a01      	cmp	r2, #1
                _displayfunction |= LCD_5x10DOTS;
   d45ca:	bf02      	ittt	eq
   d45cc:	7a43      	ldrbeq	r3, [r0, #9]
   d45ce:	f043 0304 	orreq.w	r3, r3, #4
   d45d2:	7243      	strbeq	r3, [r0, #9]
        delay(50);
   d45d4:	2032      	movs	r0, #50	; 0x32
   d45d6:	f000 fc03 	bl	d4de0 <delay>
        expanderWrite(_backlightval);   // reset expanderand turn backlight off (Bit 8 =1)
   d45da:	7be1      	ldrb	r1, [r4, #15]
   d45dc:	4620      	mov	r0, r4
   d45de:	f7ff ff4d 	bl	d447c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        delay(1000);
   d45e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d45e6:	f000 fbfb 	bl	d4de0 <delay>
   write4bits(0x03 << 4);
   d45ea:	2130      	movs	r1, #48	; 0x30
   d45ec:	4620      	mov	r0, r4
   d45ee:	f7ff ff7c 	bl	d44ea <_ZN17LiquidCrystal_I2C10write4bitsEh>
   d45f2:	f241 1094 	movw	r0, #4500	; 0x1194
   d45f6:	f000 f863 	bl	d46c0 <HAL_Delay_Microseconds>
   write4bits(0x03 << 4);
   d45fa:	2130      	movs	r1, #48	; 0x30
   d45fc:	4620      	mov	r0, r4
   d45fe:	f7ff ff74 	bl	d44ea <_ZN17LiquidCrystal_I2C10write4bitsEh>
   d4602:	f241 1094 	movw	r0, #4500	; 0x1194
   d4606:	f000 f85b 	bl	d46c0 <HAL_Delay_Microseconds>
   write4bits(0x03 << 4);
   d460a:	2130      	movs	r1, #48	; 0x30
   d460c:	4620      	mov	r0, r4
   d460e:	f7ff ff6c 	bl	d44ea <_ZN17LiquidCrystal_I2C10write4bitsEh>
   d4612:	2096      	movs	r0, #150	; 0x96
   d4614:	f000 f854 	bl	d46c0 <HAL_Delay_Microseconds>
   write4bits(0x02 << 4);
   d4618:	4620      	mov	r0, r4
   d461a:	2120      	movs	r1, #32
   d461c:	f7ff ff65 	bl	d44ea <_ZN17LiquidCrystal_I2C10write4bitsEh>
        command(LCD_FUNCTIONSET | _displayfunction);
   d4620:	7a61      	ldrb	r1, [r4, #9]
   d4622:	4620      	mov	r0, r4
   d4624:	f041 0120 	orr.w	r1, r1, #32
   d4628:	f7ff ff81 	bl	d452e <_ZN17LiquidCrystal_I2C7commandEh>
        _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
   d462c:	2304      	movs	r3, #4
   d462e:	72a3      	strb	r3, [r4, #10]
        display();
   d4630:	4620      	mov	r0, r4
   d4632:	f7ff ffb3 	bl	d459c <_ZN17LiquidCrystal_I2C7displayEv>
        clear();
   d4636:	4620      	mov	r0, r4
   d4638:	f7ff ff7c 	bl	d4534 <_ZN17LiquidCrystal_I2C5clearEv>
        _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
   d463c:	2302      	movs	r3, #2
        command(LCD_ENTRYMODESET | _displaymode);
   d463e:	4620      	mov	r0, r4
        _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
   d4640:	72e3      	strb	r3, [r4, #11]
        command(LCD_ENTRYMODESET | _displaymode);
   d4642:	2106      	movs	r1, #6
   d4644:	f7ff ff73 	bl	d452e <_ZN17LiquidCrystal_I2C7commandEh>
        home();
   d4648:	4620      	mov	r0, r4
}
   d464a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        home();
   d464e:	f7ff bf7b 	b.w	d4548 <_ZN17LiquidCrystal_I2C4homeEv>
	...

000d4654 <_ZN17LiquidCrystal_I2C9init_privEv>:
{
   d4654:	b510      	push	{r4, lr}
   d4656:	4604      	mov	r4, r0
        Wire.setSpeed(CLOCK_SPEED_100KHZ);
   d4658:	f001 fa14 	bl	d5a84 <_Z19__fetch_global_Wirev>
   d465c:	490a      	ldr	r1, [pc, #40]	; (d4688 <_ZN17LiquidCrystal_I2C9init_privEv+0x34>)
   d465e:	f001 f8f1 	bl	d5844 <_ZN7TwoWire8setSpeedEm>
        Wire.stretchClock(true);
   d4662:	f001 fa0f 	bl	d5a84 <_Z19__fetch_global_Wirev>
   d4666:	2101      	movs	r1, #1
   d4668:	f001 f8f0 	bl	d584c <_ZN7TwoWire12stretchClockEb>
        Wire.begin();
   d466c:	f001 fa0a 	bl	d5a84 <_Z19__fetch_global_Wirev>
   d4670:	f001 f8f0 	bl	d5854 <_ZN7TwoWire5beginEv>
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
   d4674:	2300      	movs	r3, #0
        begin(_cols, _rows);
   d4676:	7ba2      	ldrb	r2, [r4, #14]
   d4678:	7b61      	ldrb	r1, [r4, #13]
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
   d467a:	7263      	strb	r3, [r4, #9]
        begin(_cols, _rows);
   d467c:	4620      	mov	r0, r4
}
   d467e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        begin(_cols, _rows);
   d4682:	f7ff bf95 	b.w	d45b0 <_ZN17LiquidCrystal_I2C5beginEhhh>
   d4686:	bf00      	nop
   d4688:	000186a0 	.word	0x000186a0

000d468c <_ZN17LiquidCrystal_I2C4initEv>:
        init_priv();
   d468c:	f7ff bfe2 	b.w	d4654 <_ZN17LiquidCrystal_I2C9init_privEv>

000d4690 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4690:	b508      	push	{r3, lr}
   d4692:	4b02      	ldr	r3, [pc, #8]	; (d469c <netdb_freeaddrinfo+0xc>)
   d4694:	681b      	ldr	r3, [r3, #0]
   d4696:	689b      	ldr	r3, [r3, #8]
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	bd08      	pop	{r3, pc}
   d469c:	00030268 	.word	0x00030268

000d46a0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d46a0:	b508      	push	{r3, lr}
   d46a2:	4b02      	ldr	r3, [pc, #8]	; (d46ac <netdb_getaddrinfo+0xc>)
   d46a4:	681b      	ldr	r3, [r3, #0]
   d46a6:	68db      	ldr	r3, [r3, #12]
   d46a8:	9301      	str	r3, [sp, #4]
   d46aa:	bd08      	pop	{r3, pc}
   d46ac:	00030268 	.word	0x00030268

000d46b0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d46b0:	b508      	push	{r3, lr}
   d46b2:	4b02      	ldr	r3, [pc, #8]	; (d46bc <HAL_RNG_GetRandomNumber+0xc>)
   d46b4:	681b      	ldr	r3, [r3, #0]
   d46b6:	685b      	ldr	r3, [r3, #4]
   d46b8:	9301      	str	r3, [sp, #4]
   d46ba:	bd08      	pop	{r3, pc}
   d46bc:	00030218 	.word	0x00030218

000d46c0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <HAL_Delay_Microseconds+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	68db      	ldr	r3, [r3, #12]
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	00030218 	.word	0x00030218

000d46d0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b02      	ldr	r3, [pc, #8]	; (d46dc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	695b      	ldr	r3, [r3, #20]
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	bd08      	pop	{r3, pc}
   d46dc:	00030218 	.word	0x00030218

000d46e0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d46e0:	b508      	push	{r3, lr}
   d46e2:	4b02      	ldr	r3, [pc, #8]	; (d46ec <os_mutex_recursive_create+0xc>)
   d46e4:	681b      	ldr	r3, [r3, #0]
   d46e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d46e8:	9301      	str	r3, [sp, #4]
   d46ea:	bd08      	pop	{r3, pc}
   d46ec:	00030248 	.word	0x00030248

000d46f0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d46f0:	b508      	push	{r3, lr}
   d46f2:	4b02      	ldr	r3, [pc, #8]	; (d46fc <os_mutex_recursive_destroy+0xc>)
   d46f4:	681b      	ldr	r3, [r3, #0]
   d46f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d46f8:	9301      	str	r3, [sp, #4]
   d46fa:	bd08      	pop	{r3, pc}
   d46fc:	00030248 	.word	0x00030248

000d4700 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b02      	ldr	r3, [pc, #8]	; (d470c <inet_inet_ntop+0xc>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	695b      	ldr	r3, [r3, #20]
   d4708:	9301      	str	r3, [sp, #4]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	00030264 	.word	0x00030264

000d4710 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4710:	b508      	push	{r3, lr}
   d4712:	4b02      	ldr	r3, [pc, #8]	; (d471c <hal_usart_init+0xc>)
   d4714:	681b      	ldr	r3, [r3, #0]
   d4716:	681b      	ldr	r3, [r3, #0]
   d4718:	9301      	str	r3, [sp, #4]
   d471a:	bd08      	pop	{r3, pc}
   d471c:	0003023c 	.word	0x0003023c

000d4720 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <hal_usart_write+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	68db      	ldr	r3, [r3, #12]
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	0003023c 	.word	0x0003023c

000d4730 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <hal_usart_available+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	691b      	ldr	r3, [r3, #16]
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	0003023c 	.word	0x0003023c

000d4740 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <hal_usart_read+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	695b      	ldr	r3, [r3, #20]
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	0003023c 	.word	0x0003023c

000d4750 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <hal_usart_peek+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	699b      	ldr	r3, [r3, #24]
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	0003023c 	.word	0x0003023c

000d4760 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <hal_usart_flush+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	69db      	ldr	r3, [r3, #28]
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	0003023c 	.word	0x0003023c

000d4770 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <hal_usart_available_data_for_write+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	0003023c 	.word	0x0003023c

000d4780 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <hal_usart_begin_config+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	0003023c 	.word	0x0003023c

000d4790 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b02      	ldr	r3, [pc, #8]	; (d479c <hal_i2c_set_speed+0xc>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	681b      	ldr	r3, [r3, #0]
   d4798:	9301      	str	r3, [sp, #4]
   d479a:	bd08      	pop	{r3, pc}
   d479c:	00030228 	.word	0x00030228

000d47a0 <hal_i2c_stretch_clock>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <hal_i2c_stretch_clock+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	689b      	ldr	r3, [r3, #8]
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	00030228 	.word	0x00030228

000d47b0 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <hal_i2c_begin+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	68db      	ldr	r3, [r3, #12]
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	00030228 	.word	0x00030228

000d47c0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <hal_i2c_begin_transmission+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	699b      	ldr	r3, [r3, #24]
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	00030228 	.word	0x00030228

000d47d0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <hal_i2c_end_transmission+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	69db      	ldr	r3, [r3, #28]
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	00030228 	.word	0x00030228

000d47e0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <hal_i2c_write+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	6a1b      	ldr	r3, [r3, #32]
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	00030228 	.word	0x00030228

000d47f0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <hal_i2c_available+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	00030228 	.word	0x00030228

000d4800 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <hal_i2c_read+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	00030228 	.word	0x00030228

000d4810 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <hal_i2c_peek+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	00030228 	.word	0x00030228

000d4820 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <hal_i2c_flush+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	00030228 	.word	0x00030228

000d4830 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <hal_i2c_init+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	00030228 	.word	0x00030228

000d4840 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <HAL_USB_USART_Init+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	681b      	ldr	r3, [r3, #0]
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	0003024c 	.word	0x0003024c

000d4850 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <HAL_USB_USART_Available_Data+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	691b      	ldr	r3, [r3, #16]
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	0003024c 	.word	0x0003024c

000d4860 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	695b      	ldr	r3, [r3, #20]
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	0003024c 	.word	0x0003024c

000d4870 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <HAL_USB_USART_Receive_Data+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	699b      	ldr	r3, [r3, #24]
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	0003024c 	.word	0x0003024c

000d4880 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <HAL_USB_USART_Send_Data+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	69db      	ldr	r3, [r3, #28]
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	0003024c 	.word	0x0003024c

000d4890 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4890:	b508      	push	{r3, lr}
   d4892:	4b02      	ldr	r3, [pc, #8]	; (d489c <HAL_USB_USART_Flush_Data+0xc>)
   d4894:	681b      	ldr	r3, [r3, #0]
   d4896:	6a1b      	ldr	r3, [r3, #32]
   d4898:	9301      	str	r3, [sp, #4]
   d489a:	bd08      	pop	{r3, pc}
   d489c:	0003024c 	.word	0x0003024c

000d48a0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <set_system_mode+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	685b      	ldr	r3, [r3, #4]
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	00030220 	.word	0x00030220

000d48b0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <system_delay_ms+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	695b      	ldr	r3, [r3, #20]
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	00030220 	.word	0x00030220

000d48c0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <application_thread_current+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	00030220 	.word	0x00030220

000d48d0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <application_thread_invoke+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	00030220 	.word	0x00030220

000d48e0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b03      	ldr	r3, [pc, #12]	; (d48f0 <system_ctrl_set_app_request_handler+0x10>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d48ea:	9301      	str	r3, [sp, #4]
   d48ec:	bd08      	pop	{r3, pc}
   d48ee:	0000      	.short	0x0000
   d48f0:	00030220 	.word	0x00030220

000d48f4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d48f4:	b508      	push	{r3, lr}
   d48f6:	4b03      	ldr	r3, [pc, #12]	; (d4904 <system_ctrl_set_result+0x10>)
   d48f8:	681b      	ldr	r3, [r3, #0]
   d48fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d48fe:	9301      	str	r3, [sp, #4]
   d4900:	bd08      	pop	{r3, pc}
   d4902:	0000      	.short	0x0000
   d4904:	00030220 	.word	0x00030220

000d4908 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <network_connect+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	685b      	ldr	r3, [r3, #4]
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	00030240 	.word	0x00030240

000d4918 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <network_connecting+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	689b      	ldr	r3, [r3, #8]
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	00030240 	.word	0x00030240

000d4928 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <network_disconnect+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	68db      	ldr	r3, [r3, #12]
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	00030240 	.word	0x00030240

000d4938 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <network_ready+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	691b      	ldr	r3, [r3, #16]
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	00030240 	.word	0x00030240

000d4948 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <network_on+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	695b      	ldr	r3, [r3, #20]
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	00030240 	.word	0x00030240

000d4958 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <network_off+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	699b      	ldr	r3, [r3, #24]
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	00030240 	.word	0x00030240

000d4968 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <network_listen+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	69db      	ldr	r3, [r3, #28]
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	00030240 	.word	0x00030240

000d4978 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <network_listening+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	6a1b      	ldr	r3, [r3, #32]
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	00030240 	.word	0x00030240

000d4988 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <network_set_listen_timeout+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	00030240 	.word	0x00030240

000d4998 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <network_get_listen_timeout+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	00030240 	.word	0x00030240

000d49a8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <network_is_on+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	00030240 	.word	0x00030240

000d49b8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <network_is_off+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	00030240 	.word	0x00030240

000d49c8 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <spark_cloud_flag_connected+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	695b      	ldr	r3, [r3, #20]
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	00030244 	.word	0x00030244

000d49d8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <spark_send_event+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	6a1b      	ldr	r3, [r3, #32]
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	00030244 	.word	0x00030244

000d49e8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	00030244 	.word	0x00030244

000d49f8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <malloc+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	681b      	ldr	r3, [r3, #0]
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	0003021c 	.word	0x0003021c

000d4a08 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b02      	ldr	r3, [pc, #8]	; (d4a14 <free+0xc>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	685b      	ldr	r3, [r3, #4]
   d4a10:	9301      	str	r3, [sp, #4]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	0003021c 	.word	0x0003021c

000d4a18 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b02      	ldr	r3, [pc, #8]	; (d4a24 <realloc+0xc>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	689b      	ldr	r3, [r3, #8]
   d4a20:	9301      	str	r3, [sp, #4]
   d4a22:	bd08      	pop	{r3, pc}
   d4a24:	0003021c 	.word	0x0003021c

000d4a28 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4a28:	b508      	push	{r3, lr}
   d4a2a:	4b02      	ldr	r3, [pc, #8]	; (d4a34 <abort+0xc>)
   d4a2c:	681b      	ldr	r3, [r3, #0]
   d4a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a30:	9301      	str	r3, [sp, #4]
   d4a32:	bd08      	pop	{r3, pc}
   d4a34:	0003021c 	.word	0x0003021c

000d4a38 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4a38:	b508      	push	{r3, lr}
   d4a3a:	4b02      	ldr	r3, [pc, #8]	; (d4a44 <_malloc_r+0xc>)
   d4a3c:	681b      	ldr	r3, [r3, #0]
   d4a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a40:	9301      	str	r3, [sp, #4]
   d4a42:	bd08      	pop	{r3, pc}
   d4a44:	0003021c 	.word	0x0003021c

000d4a48 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4a48:	b508      	push	{r3, lr}
   d4a4a:	4b02      	ldr	r3, [pc, #8]	; (d4a54 <newlib_impure_ptr_callback+0xc>)
   d4a4c:	681b      	ldr	r3, [r3, #0]
   d4a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a50:	9301      	str	r3, [sp, #4]
   d4a52:	bd08      	pop	{r3, pc}
   d4a54:	0003021c 	.word	0x0003021c

000d4a58 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4a58:	2200      	movs	r2, #0
   d4a5a:	6840      	ldr	r0, [r0, #4]
   d4a5c:	4611      	mov	r1, r2
   d4a5e:	f7ff bf8b 	b.w	d4978 <network_listening>

000d4a62 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4a62:	2200      	movs	r2, #0
   d4a64:	6840      	ldr	r0, [r0, #4]
   d4a66:	4611      	mov	r1, r2
   d4a68:	f7ff bf96 	b.w	d4998 <network_get_listen_timeout>

000d4a6c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4a6c:	6840      	ldr	r0, [r0, #4]
   d4a6e:	2200      	movs	r2, #0
   d4a70:	f7ff bf8a 	b.w	d4988 <network_set_listen_timeout>

000d4a74 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4a74:	6840      	ldr	r0, [r0, #4]
   d4a76:	2200      	movs	r2, #0
   d4a78:	f081 0101 	eor.w	r1, r1, #1
   d4a7c:	f7ff bf74 	b.w	d4968 <network_listen>

000d4a80 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4a80:	2300      	movs	r3, #0
   d4a82:	6840      	ldr	r0, [r0, #4]
   d4a84:	461a      	mov	r2, r3
   d4a86:	4619      	mov	r1, r3
   d4a88:	f7ff bf66 	b.w	d4958 <network_off>

000d4a8c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4a8c:	2300      	movs	r3, #0
   d4a8e:	6840      	ldr	r0, [r0, #4]
   d4a90:	461a      	mov	r2, r3
   d4a92:	4619      	mov	r1, r3
   d4a94:	f7ff bf58 	b.w	d4948 <network_on>

000d4a98 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4a98:	2200      	movs	r2, #0
   d4a9a:	6840      	ldr	r0, [r0, #4]
   d4a9c:	4611      	mov	r1, r2
   d4a9e:	f7ff bf4b 	b.w	d4938 <network_ready>

000d4aa2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4aa2:	2200      	movs	r2, #0
   d4aa4:	6840      	ldr	r0, [r0, #4]
   d4aa6:	4611      	mov	r1, r2
   d4aa8:	f7ff bf36 	b.w	d4918 <network_connecting>

000d4aac <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4aac:	6840      	ldr	r0, [r0, #4]
   d4aae:	2200      	movs	r2, #0
   d4ab0:	2102      	movs	r1, #2
   d4ab2:	f7ff bf39 	b.w	d4928 <network_disconnect>

000d4ab6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4ab6:	2300      	movs	r3, #0
   d4ab8:	6840      	ldr	r0, [r0, #4]
   d4aba:	461a      	mov	r2, r3
   d4abc:	f7ff bf24 	b.w	d4908 <network_connect>

000d4ac0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4ac0:	4b02      	ldr	r3, [pc, #8]	; (d4acc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4ac2:	2203      	movs	r2, #3
   d4ac4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4ac6:	4a02      	ldr	r2, [pc, #8]	; (d4ad0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4ac8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4aca:	4770      	bx	lr
   d4acc:	2003e750 	.word	0x2003e750
   d4ad0:	000d5da8 	.word	0x000d5da8

000d4ad4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4ad4:	b510      	push	{r4, lr}
   d4ad6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4ad8:	6800      	ldr	r0, [r0, #0]
   d4ada:	b118      	cbz	r0, d4ae4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4adc:	f7ff ff94 	bl	d4a08 <free>
            wakeupSource_ = nullptr;
   d4ae0:	2300      	movs	r3, #0
   d4ae2:	6023      	str	r3, [r4, #0]
        }
    }
   d4ae4:	bd10      	pop	{r4, pc}

000d4ae6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4ae6:	b510      	push	{r4, lr}
   d4ae8:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4aea:	f7ff fff3 	bl	d4ad4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d4aee:	4620      	mov	r0, r4
   d4af0:	bd10      	pop	{r4, pc}
	...

000d4af4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4af4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4af6:	4b09      	ldr	r3, [pc, #36]	; (d4b1c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d4af8:	4c09      	ldr	r4, [pc, #36]	; (d4b20 <_GLOBAL__sub_I_System+0x2c>)
   d4afa:	2202      	movs	r2, #2
   d4afc:	2000      	movs	r0, #0
   d4afe:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4b00:	4b08      	ldr	r3, [pc, #32]	; (d4b24 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4b02:	6020      	str	r0, [r4, #0]
   d4b04:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4b06:	71a0      	strb	r0, [r4, #6]
   d4b08:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4b0a:	f7ff fec9 	bl	d48a0 <set_system_mode>
SystemClass System;
   d4b0e:	4620      	mov	r0, r4
   d4b10:	4a05      	ldr	r2, [pc, #20]	; (d4b28 <_GLOBAL__sub_I_System+0x34>)
   d4b12:	4906      	ldr	r1, [pc, #24]	; (d4b2c <_GLOBAL__sub_I_System+0x38>)
   d4b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4b18:	f000 bfdc 	b.w	d5ad4 <__aeabi_atexit>
   d4b1c:	2003e764 	.word	0x2003e764
   d4b20:	2003e758 	.word	0x2003e758
   d4b24:	ffff0000 	.word	0xffff0000
   d4b28:	2003e718 	.word	0x2003e718
   d4b2c:	000d4ae7 	.word	0x000d4ae7

000d4b30 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4b30:	b510      	push	{r4, lr}
   d4b32:	4604      	mov	r4, r0
{
	free(buffer);
   d4b34:	6800      	ldr	r0, [r0, #0]
   d4b36:	f7ff ff67 	bl	d4a08 <free>
}
   d4b3a:	4620      	mov	r0, r4
   d4b3c:	bd10      	pop	{r4, pc}

000d4b3e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4b3e:	b510      	push	{r4, lr}
   d4b40:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4b42:	6800      	ldr	r0, [r0, #0]
   d4b44:	b108      	cbz	r0, d4b4a <_ZN6String10invalidateEv+0xc>
   d4b46:	f7ff ff5f 	bl	d4a08 <free>
	buffer = NULL;
   d4b4a:	2300      	movs	r3, #0
	capacity = len = 0;
   d4b4c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4b50:	6023      	str	r3, [r4, #0]
}
   d4b52:	bd10      	pop	{r4, pc}

000d4b54 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4b54:	b538      	push	{r3, r4, r5, lr}
   d4b56:	4604      	mov	r4, r0
   d4b58:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4b5a:	6800      	ldr	r0, [r0, #0]
   d4b5c:	3101      	adds	r1, #1
   d4b5e:	f7ff ff5b 	bl	d4a18 <realloc>
	if (newbuffer) {
   d4b62:	b110      	cbz	r0, d4b6a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4b64:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4b68:	2001      	movs	r0, #1
	}
	return 0;
}
   d4b6a:	bd38      	pop	{r3, r4, r5, pc}

000d4b6c <_ZN6String7reserveEj>:
{
   d4b6c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4b6e:	6803      	ldr	r3, [r0, #0]
{
   d4b70:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4b72:	b123      	cbz	r3, d4b7e <_ZN6String7reserveEj+0x12>
   d4b74:	6843      	ldr	r3, [r0, #4]
   d4b76:	428b      	cmp	r3, r1
   d4b78:	d301      	bcc.n	d4b7e <_ZN6String7reserveEj+0x12>
   d4b7a:	2001      	movs	r0, #1
}
   d4b7c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4b7e:	4620      	mov	r0, r4
   d4b80:	f7ff ffe8 	bl	d4b54 <_ZN6String12changeBufferEj>
   d4b84:	2800      	cmp	r0, #0
   d4b86:	d0f9      	beq.n	d4b7c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4b88:	68a3      	ldr	r3, [r4, #8]
   d4b8a:	2b00      	cmp	r3, #0
   d4b8c:	d1f5      	bne.n	d4b7a <_ZN6String7reserveEj+0xe>
   d4b8e:	6822      	ldr	r2, [r4, #0]
   d4b90:	7013      	strb	r3, [r2, #0]
   d4b92:	e7f2      	b.n	d4b7a <_ZN6String7reserveEj+0xe>

000d4b94 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4b96:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4b98:	4611      	mov	r1, r2
   d4b9a:	9201      	str	r2, [sp, #4]
{
   d4b9c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4b9e:	f7ff ffe5 	bl	d4b6c <_ZN6String7reserveEj>
   d4ba2:	9a01      	ldr	r2, [sp, #4]
   d4ba4:	b928      	cbnz	r0, d4bb2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4ba6:	4620      	mov	r0, r4
   d4ba8:	f7ff ffc9 	bl	d4b3e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4bac:	4620      	mov	r0, r4
   d4bae:	b003      	add	sp, #12
   d4bb0:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4bb2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4bb4:	4629      	mov	r1, r5
   d4bb6:	6820      	ldr	r0, [r4, #0]
   d4bb8:	f000 ffaa 	bl	d5b10 <memcpy>
	buffer[len] = 0;
   d4bbc:	6822      	ldr	r2, [r4, #0]
   d4bbe:	68a3      	ldr	r3, [r4, #8]
   d4bc0:	2100      	movs	r1, #0
   d4bc2:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4bc4:	e7f2      	b.n	d4bac <_ZN6String4copyEPKcj+0x18>

000d4bc6 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d4bc6:	2300      	movs	r3, #0
String::String(const char *cstr)
   d4bc8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d4bca:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d4bce:	4604      	mov	r4, r0
	len = 0;
   d4bd0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4bd2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d4bd4:	b141      	cbz	r1, d4be8 <_ZN6StringC1EPKc+0x22>
   d4bd6:	4608      	mov	r0, r1
   d4bd8:	9101      	str	r1, [sp, #4]
   d4bda:	f000 fffa 	bl	d5bd2 <strlen>
   d4bde:	9901      	ldr	r1, [sp, #4]
   d4be0:	4602      	mov	r2, r0
   d4be2:	4620      	mov	r0, r4
   d4be4:	f7ff ffd6 	bl	d4b94 <_ZN6String4copyEPKcj>
}
   d4be8:	4620      	mov	r0, r4
   d4bea:	b002      	add	sp, #8
   d4bec:	bd10      	pop	{r4, pc}

000d4bee <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4bee:	4288      	cmp	r0, r1
{
   d4bf0:	b510      	push	{r4, lr}
   d4bf2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4bf4:	d005      	beq.n	d4c02 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4bf6:	680b      	ldr	r3, [r1, #0]
   d4bf8:	b12b      	cbz	r3, d4c06 <_ZN6StringaSERKS_+0x18>
   d4bfa:	688a      	ldr	r2, [r1, #8]
   d4bfc:	4619      	mov	r1, r3
   d4bfe:	f7ff ffc9 	bl	d4b94 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4c02:	4620      	mov	r0, r4
   d4c04:	bd10      	pop	{r4, pc}
	else invalidate();
   d4c06:	f7ff ff9a 	bl	d4b3e <_ZN6String10invalidateEv>
   d4c0a:	e7fa      	b.n	d4c02 <_ZN6StringaSERKS_+0x14>

000d4c0c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d4c0c:	b510      	push	{r4, lr}
	buffer = NULL;
   d4c0e:	2300      	movs	r3, #0
String::String(const String &value)
   d4c10:	4604      	mov	r4, r0
	capacity = 0;
   d4c12:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d4c16:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4c18:	7303      	strb	r3, [r0, #12]
	*this = value;
   d4c1a:	f7ff ffe8 	bl	d4bee <_ZN6StringaSERKS_>
}
   d4c1e:	4620      	mov	r0, r4
   d4c20:	bd10      	pop	{r4, pc}

000d4c22 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4c22:	b513      	push	{r0, r1, r4, lr}
   d4c24:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4c26:	b159      	cbz	r1, d4c40 <_ZN6StringaSEPKc+0x1e>
   d4c28:	4608      	mov	r0, r1
   d4c2a:	9101      	str	r1, [sp, #4]
   d4c2c:	f000 ffd1 	bl	d5bd2 <strlen>
   d4c30:	9901      	ldr	r1, [sp, #4]
   d4c32:	4602      	mov	r2, r0
   d4c34:	4620      	mov	r0, r4
   d4c36:	f7ff ffad 	bl	d4b94 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4c3a:	4620      	mov	r0, r4
   d4c3c:	b002      	add	sp, #8
   d4c3e:	bd10      	pop	{r4, pc}
	else invalidate();
   d4c40:	f7ff ff7d 	bl	d4b3e <_ZN6String10invalidateEv>
   d4c44:	e7f9      	b.n	d4c3a <_ZN6StringaSEPKc+0x18>

000d4c46 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d4c46:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4c48:	6882      	ldr	r2, [r0, #8]
   d4c4a:	b93a      	cbnz	r2, d4c5c <_ZNK6String6equalsEPKc+0x16>
   d4c4c:	b121      	cbz	r1, d4c58 <_ZNK6String6equalsEPKc+0x12>
   d4c4e:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d4c50:	fab0 f080 	clz	r0, r0
   d4c54:	0940      	lsrs	r0, r0, #5
   d4c56:	e000      	b.n	d4c5a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4c58:	2001      	movs	r0, #1
}
   d4c5a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d4c5c:	6800      	ldr	r0, [r0, #0]
   d4c5e:	b909      	cbnz	r1, d4c64 <_ZNK6String6equalsEPKc+0x1e>
   d4c60:	7800      	ldrb	r0, [r0, #0]
   d4c62:	e7f5      	b.n	d4c50 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d4c64:	f000 ff8e 	bl	d5b84 <strcmp>
   d4c68:	e7f2      	b.n	d4c50 <_ZNK6String6equalsEPKc+0xa>

000d4c6a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4c6a:	b510      	push	{r4, lr}
   d4c6c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4c6e:	6800      	ldr	r0, [r0, #0]
   d4c70:	b108      	cbz	r0, d4c76 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4c72:	f7ff fd3d 	bl	d46f0 <os_mutex_recursive_destroy>
    }
   d4c76:	4620      	mov	r0, r4
   d4c78:	bd10      	pop	{r4, pc}

000d4c7a <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4c7a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4c7c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4c7e:	4604      	mov	r4, r0
      if (_M_manager)
   d4c80:	b113      	cbz	r3, d4c88 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4c82:	2203      	movs	r2, #3
   d4c84:	4601      	mov	r1, r0
   d4c86:	4798      	blx	r3
    }
   d4c88:	4620      	mov	r0, r4
   d4c8a:	bd10      	pop	{r4, pc}

000d4c8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d4c8c:	680b      	ldr	r3, [r1, #0]
   d4c8e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d4c90:	b113      	cbz	r3, d4c98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4c92:	685a      	ldr	r2, [r3, #4]
   d4c94:	3201      	adds	r2, #1
   d4c96:	605a      	str	r2, [r3, #4]
      }
   d4c98:	4770      	bx	lr

000d4c9a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d4c9a:	b513      	push	{r0, r1, r4, lr}
   d4c9c:	460b      	mov	r3, r1
   d4c9e:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ca0:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4ca4:	466c      	mov	r4, sp
   d4ca6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4caa:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4cae:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4cb2:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4cb6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4cba:	b002      	add	sp, #8
   d4cbc:	bd10      	pop	{r4, pc}
	...

000d4cc0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d4cc0:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4cc2:	4c06      	ldr	r4, [pc, #24]	; (d4cdc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4cc4:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4cc6:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4cc8:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4cca:	f7ff fd09 	bl	d46e0 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4cce:	4620      	mov	r0, r4
   d4cd0:	4a03      	ldr	r2, [pc, #12]	; (d4ce0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4cd2:	4904      	ldr	r1, [pc, #16]	; (d4ce4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4cd8:	f000 befc 	b.w	d5ad4 <__aeabi_atexit>
   d4cdc:	2003e768 	.word	0x2003e768
   d4ce0:	2003e718 	.word	0x2003e718
   d4ce4:	000d4c6b 	.word	0x000d4c6b

000d4ce8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4cea:	4606      	mov	r6, r0
   d4cec:	460d      	mov	r5, r1
  size_t n = 0;
   d4cee:	188f      	adds	r7, r1, r2
   d4cf0:	2400      	movs	r4, #0
  while (size--) {
   d4cf2:	42bd      	cmp	r5, r7
   d4cf4:	d00c      	beq.n	d4d10 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4cf6:	6833      	ldr	r3, [r6, #0]
   d4cf8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4cfc:	689b      	ldr	r3, [r3, #8]
   d4cfe:	4630      	mov	r0, r6
   d4d00:	4798      	blx	r3
     if (chunk>=0)
   d4d02:	1e03      	subs	r3, r0, #0
   d4d04:	db01      	blt.n	d4d0a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4d06:	441c      	add	r4, r3
  while (size--) {
   d4d08:	e7f3      	b.n	d4cf2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4d0a:	2c00      	cmp	r4, #0
   d4d0c:	bf08      	it	eq
   d4d0e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4d10:	4620      	mov	r0, r4
   d4d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d14 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4d14:	b513      	push	{r0, r1, r4, lr}
   d4d16:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4d18:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4d1a:	b159      	cbz	r1, d4d34 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4d1c:	9101      	str	r1, [sp, #4]
   d4d1e:	f000 ff58 	bl	d5bd2 <strlen>
   d4d22:	6823      	ldr	r3, [r4, #0]
   d4d24:	9901      	ldr	r1, [sp, #4]
   d4d26:	68db      	ldr	r3, [r3, #12]
   d4d28:	4602      	mov	r2, r0
   d4d2a:	4620      	mov	r0, r4
    }
   d4d2c:	b002      	add	sp, #8
   d4d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4d32:	4718      	bx	r3
    }
   d4d34:	b002      	add	sp, #8
   d4d36:	bd10      	pop	{r4, pc}

000d4d38 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d4d38:	b508      	push	{r3, lr}
  return write(str);
   d4d3a:	f7ff ffeb 	bl	d4d14 <_ZN5Print5writeEPKc>
}
   d4d3e:	bd08      	pop	{r3, pc}

000d4d40 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d4d40:	6803      	ldr	r3, [r0, #0]
   d4d42:	689b      	ldr	r3, [r3, #8]
   d4d44:	4718      	bx	r3

000d4d46 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4d46:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4d48:	210d      	movs	r1, #13
{
   d4d4a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4d4c:	f7ff fff8 	bl	d4d40 <_ZN5Print5printEc>
  n += print('\n');
   d4d50:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4d52:	4604      	mov	r4, r0
  n += print('\n');
   d4d54:	4628      	mov	r0, r5
   d4d56:	f7ff fff3 	bl	d4d40 <_ZN5Print5printEc>
  return n;
}
   d4d5a:	4420      	add	r0, r4
   d4d5c:	bd38      	pop	{r3, r4, r5, pc}

000d4d5e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4d5e:	b538      	push	{r3, r4, r5, lr}
   d4d60:	4605      	mov	r5, r0
  return write(str);
   d4d62:	f7ff ffd7 	bl	d4d14 <_ZN5Print5writeEPKc>
   d4d66:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d4d68:	4628      	mov	r0, r5
   d4d6a:	f7ff ffec 	bl	d4d46 <_ZN5Print7printlnEv>
  return n;
}
   d4d6e:	4420      	add	r0, r4
   d4d70:	bd38      	pop	{r3, r4, r5, pc}

000d4d72 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4d72:	b530      	push	{r4, r5, lr}
   d4d74:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4d76:	2300      	movs	r3, #0
   d4d78:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4d7c:	2a01      	cmp	r2, #1
   d4d7e:	bf98      	it	ls
   d4d80:	220a      	movls	r2, #10
   d4d82:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4d84:	460d      	mov	r5, r1
   d4d86:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4d8a:	fb01 5312 	mls	r3, r1, r2, r5
   d4d8e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4d92:	2b09      	cmp	r3, #9
   d4d94:	bf94      	ite	ls
   d4d96:	3330      	addls	r3, #48	; 0x30
   d4d98:	3337      	addhi	r3, #55	; 0x37
   d4d9a:	b2db      	uxtb	r3, r3
  } while(n);
   d4d9c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4d9e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4da2:	d9ef      	bls.n	d4d84 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4da4:	4621      	mov	r1, r4
   d4da6:	f7ff ffb5 	bl	d4d14 <_ZN5Print5writeEPKc>
}
   d4daa:	b00b      	add	sp, #44	; 0x2c
   d4dac:	bd30      	pop	{r4, r5, pc}

000d4dae <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4dae:	2300      	movs	r3, #0
   d4db0:	6840      	ldr	r0, [r0, #4]
   d4db2:	461a      	mov	r2, r3
   d4db4:	4619      	mov	r1, r3
   d4db6:	f7ff bdc7 	b.w	d4948 <network_on>
	...

000d4dbc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4dbc:	4b01      	ldr	r3, [pc, #4]	; (d4dc4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4dbe:	4a02      	ldr	r2, [pc, #8]	; (d4dc8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4dc0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4dc2:	4770      	bx	lr
   d4dc4:	2003e76c 	.word	0x2003e76c
   d4dc8:	000d5ddc 	.word	0x000d5ddc

000d4dcc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4dcc:	4b02      	ldr	r3, [pc, #8]	; (d4dd8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4dce:	681a      	ldr	r2, [r3, #0]
   d4dd0:	4b02      	ldr	r3, [pc, #8]	; (d4ddc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4dd2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4dd4:	4770      	bx	lr
   d4dd6:	bf00      	nop
   d4dd8:	2003e6b0 	.word	0x2003e6b0
   d4ddc:	2003e770 	.word	0x2003e770

000d4de0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4de0:	2100      	movs	r1, #0
   d4de2:	f7ff bd65 	b.w	d48b0 <system_delay_ms>

000d4de6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4de6:	b510      	push	{r4, lr}
   d4de8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4dea:	f7ff ff46 	bl	d4c7a <_ZNSt14_Function_baseD1Ev>
   d4dee:	4620      	mov	r0, r4
   d4df0:	bd10      	pop	{r4, pc}
	...

000d4df4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4df4:	4803      	ldr	r0, [pc, #12]	; (d4e04 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4df6:	4a04      	ldr	r2, [pc, #16]	; (d4e08 <_GLOBAL__sub_I_RGB+0x14>)
   d4df8:	4904      	ldr	r1, [pc, #16]	; (d4e0c <_GLOBAL__sub_I_RGB+0x18>)
   d4dfa:	2300      	movs	r3, #0
   d4dfc:	6083      	str	r3, [r0, #8]
   d4dfe:	f000 be69 	b.w	d5ad4 <__aeabi_atexit>
   d4e02:	bf00      	nop
   d4e04:	2003e774 	.word	0x2003e774
   d4e08:	2003e718 	.word	0x2003e718
   d4e0c:	000d4de7 	.word	0x000d4de7

000d4e10 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4e10:	4b01      	ldr	r3, [pc, #4]	; (d4e18 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4e12:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4e14:	4770      	bx	lr
   d4e16:	bf00      	nop
   d4e18:	2003e6b4 	.word	0x2003e6b4

000d4e1c <serialEventRun>:
{
   d4e1c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4e1e:	4b0b      	ldr	r3, [pc, #44]	; (d4e4c <serialEventRun+0x30>)
   d4e20:	b143      	cbz	r3, d4e34 <serialEventRun+0x18>
   d4e22:	f000 fbf3 	bl	d560c <_Z16_fetch_usbserialv>
   d4e26:	6803      	ldr	r3, [r0, #0]
   d4e28:	691b      	ldr	r3, [r3, #16]
   d4e2a:	4798      	blx	r3
   d4e2c:	2800      	cmp	r0, #0
   d4e2e:	dd01      	ble.n	d4e34 <serialEventRun+0x18>
        serialEvent();
   d4e30:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4e34:	4b06      	ldr	r3, [pc, #24]	; (d4e50 <serialEventRun+0x34>)
   d4e36:	b143      	cbz	r3, d4e4a <serialEventRun+0x2e>
   d4e38:	f000 fc6e 	bl	d5718 <_Z22__fetch_global_Serial1v>
   d4e3c:	6803      	ldr	r3, [r0, #0]
   d4e3e:	691b      	ldr	r3, [r3, #16]
   d4e40:	4798      	blx	r3
   d4e42:	2800      	cmp	r0, #0
   d4e44:	dd01      	ble.n	d4e4a <serialEventRun+0x2e>
        serialEvent1();
   d4e46:	f3af 8000 	nop.w
}
   d4e4a:	bd08      	pop	{r3, pc}
	...

000d4e54 <_post_loop>:
{
   d4e54:	b508      	push	{r3, lr}
	serialEventRun();
   d4e56:	f7ff ffe1 	bl	d4e1c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4e5a:	f7ff fc39 	bl	d46d0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4e5e:	4b01      	ldr	r3, [pc, #4]	; (d4e64 <_post_loop+0x10>)
   d4e60:	6018      	str	r0, [r3, #0]
}
   d4e62:	bd08      	pop	{r3, pc}
   d4e64:	2003e7d4 	.word	0x2003e7d4

000d4e68 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4e68:	4802      	ldr	r0, [pc, #8]	; (d4e74 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4e6a:	4a03      	ldr	r2, [pc, #12]	; (d4e78 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4e6c:	4903      	ldr	r1, [pc, #12]	; (d4e7c <_Z33system_initialize_user_backup_ramv+0x14>)
   d4e6e:	1a12      	subs	r2, r2, r0
   d4e70:	f000 be4e 	b.w	d5b10 <memcpy>
   d4e74:	2003f400 	.word	0x2003f400
   d4e78:	2003f404 	.word	0x2003f404
   d4e7c:	000d6060 	.word	0x000d6060

000d4e80 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4e80:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4e82:	2300      	movs	r3, #0
   d4e84:	9300      	str	r3, [sp, #0]
   d4e86:	461a      	mov	r2, r3
   d4e88:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4e8c:	f7ff fd32 	bl	d48f4 <system_ctrl_set_result>
}
   d4e90:	b003      	add	sp, #12
   d4e92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4e98 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4e98:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4e9a:	8843      	ldrh	r3, [r0, #2]
   d4e9c:	2b0a      	cmp	r3, #10
   d4e9e:	d008      	beq.n	d4eb2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4ea0:	2b50      	cmp	r3, #80	; 0x50
   d4ea2:	d10b      	bne.n	d4ebc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4ea4:	4b09      	ldr	r3, [pc, #36]	; (d4ecc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4ea6:	681b      	ldr	r3, [r3, #0]
   d4ea8:	b14b      	cbz	r3, d4ebe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d4eaa:	b003      	add	sp, #12
   d4eac:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4eb0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4eb2:	f7ff ffe5 	bl	d4e80 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4eb6:	b003      	add	sp, #12
   d4eb8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4ebc:	2300      	movs	r3, #0
   d4ebe:	9300      	str	r3, [sp, #0]
   d4ec0:	461a      	mov	r2, r3
   d4ec2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4ec6:	f7ff fd15 	bl	d48f4 <system_ctrl_set_result>
}
   d4eca:	e7f4      	b.n	d4eb6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4ecc:	2003e788 	.word	0x2003e788

000d4ed0 <module_user_init_hook>:
{
   d4ed0:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4ed2:	4c12      	ldr	r4, [pc, #72]	; (d4f1c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4ed4:	4812      	ldr	r0, [pc, #72]	; (d4f20 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4ed6:	4d13      	ldr	r5, [pc, #76]	; (d4f24 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4ed8:	2100      	movs	r1, #0
   d4eda:	f7ff fdb5 	bl	d4a48 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4ede:	6823      	ldr	r3, [r4, #0]
   d4ee0:	42ab      	cmp	r3, r5
   d4ee2:	4b11      	ldr	r3, [pc, #68]	; (d4f28 <module_user_init_hook+0x58>)
   d4ee4:	bf0c      	ite	eq
   d4ee6:	2201      	moveq	r2, #1
   d4ee8:	2200      	movne	r2, #0
   d4eea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4eec:	d002      	beq.n	d4ef4 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d4eee:	f7ff ffbb 	bl	d4e68 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4ef2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4ef4:	f7ff fbdc 	bl	d46b0 <HAL_RNG_GetRandomNumber>
   d4ef8:	4604      	mov	r4, r0
    srand(seed);
   d4efa:	f000 fe1f 	bl	d5b3c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4efe:	4b0b      	ldr	r3, [pc, #44]	; (d4f2c <module_user_init_hook+0x5c>)
   d4f00:	b113      	cbz	r3, d4f08 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d4f02:	4620      	mov	r0, r4
   d4f04:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4f08:	2100      	movs	r1, #0
   d4f0a:	4808      	ldr	r0, [pc, #32]	; (d4f2c <module_user_init_hook+0x5c>)
   d4f0c:	f7ff fd6c 	bl	d49e8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4f14:	4806      	ldr	r0, [pc, #24]	; (d4f30 <module_user_init_hook+0x60>)
   d4f16:	2100      	movs	r1, #0
   d4f18:	f7ff bce2 	b.w	d48e0 <system_ctrl_set_app_request_handler>
   d4f1c:	2003f400 	.word	0x2003f400
   d4f20:	000d4e11 	.word	0x000d4e11
   d4f24:	9a271c1e 	.word	0x9a271c1e
   d4f28:	2003e784 	.word	0x2003e784
   d4f2c:	00000000 	.word	0x00000000
   d4f30:	000d4e99 	.word	0x000d4e99

000d4f34 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4f34:	4770      	bx	lr

000d4f36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d4f36:	2000      	movs	r0, #0
   d4f38:	4770      	bx	lr

000d4f3a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4f3a:	b510      	push	{r4, lr}
   d4f3c:	2110      	movs	r1, #16
   d4f3e:	4604      	mov	r4, r0
   d4f40:	f000 fdcd 	bl	d5ade <_ZdlPvj>
   d4f44:	4620      	mov	r0, r4
   d4f46:	bd10      	pop	{r4, pc}

000d4f48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d4f48:	b508      	push	{r3, lr}
      { delete this; }
   d4f4a:	f7ff fff6 	bl	d4f3a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4f4e:	bd08      	pop	{r3, pc}

000d4f50 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4f50:	b530      	push	{r4, r5, lr}
        type_(type) {
   d4f52:	2200      	movs	r2, #0
   d4f54:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d4f58:	6002      	str	r2, [r0, #0]
   d4f5a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4f5c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f5e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4f60:	680c      	ldr	r4, [r1, #0]
   d4f62:	8085      	strh	r5, [r0, #4]
   d4f64:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f66:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d4f68:	bd30      	pop	{r4, r5, pc}

000d4f6a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4f6a:	b510      	push	{r4, lr}
   d4f6c:	4604      	mov	r4, r0
    free((void*)msg_);
   d4f6e:	6800      	ldr	r0, [r0, #0]
   d4f70:	f7ff fd4a 	bl	d4a08 <free>
}
   d4f74:	4620      	mov	r0, r4
   d4f76:	bd10      	pop	{r4, pc}

000d4f78 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d4f78:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4f7a:	68c4      	ldr	r4, [r0, #12]
   d4f7c:	b1f4      	cbz	r4, d4fbc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d4f7e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4f80:	2b02      	cmp	r3, #2
   d4f82:	d103      	bne.n	d4f8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4f84:	f104 000c 	add.w	r0, r4, #12
   d4f88:	f7ff ffef 	bl	d4f6a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d4f8c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d4f8e:	b135      	cbz	r5, d4f9e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d4f90:	4628      	mov	r0, r5
   d4f92:	f7ff fe72 	bl	d4c7a <_ZNSt14_Function_baseD1Ev>
   d4f96:	2110      	movs	r1, #16
   d4f98:	4628      	mov	r0, r5
   d4f9a:	f000 fda0 	bl	d5ade <_ZdlPvj>
   d4f9e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4fa0:	b135      	cbz	r5, d4fb0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4fa2:	4628      	mov	r0, r5
   d4fa4:	f7ff fe69 	bl	d4c7a <_ZNSt14_Function_baseD1Ev>
   d4fa8:	2110      	movs	r1, #16
   d4faa:	4628      	mov	r0, r5
   d4fac:	f000 fd97 	bl	d5ade <_ZdlPvj>
   d4fb0:	4620      	mov	r0, r4
   d4fb2:	2114      	movs	r1, #20
   d4fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4fb8:	f000 bd91 	b.w	d5ade <_ZdlPvj>
   d4fbc:	bd38      	pop	{r3, r4, r5, pc}

000d4fbe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4fbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4fc0:	460e      	mov	r6, r1
   d4fc2:	4604      	mov	r4, r0
   d4fc4:	f856 3b04 	ldr.w	r3, [r6], #4
   d4fc8:	9300      	str	r3, [sp, #0]
   d4fca:	460d      	mov	r5, r1
   d4fcc:	a801      	add	r0, sp, #4
   d4fce:	4631      	mov	r1, r6
   d4fd0:	f7ff fe5c 	bl	d4c8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4fd4:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4fd6:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d4fd8:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4fda:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d4fdc:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d4fde:	2300      	movs	r3, #0
   d4fe0:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4fe2:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d4fe4:	f7ff f90a 	bl	d41fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4fe8:	4630      	mov	r0, r6
   d4fea:	f7ff f907 	bl	d41fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d4fee:	4628      	mov	r0, r5
   d4ff0:	2108      	movs	r1, #8
   d4ff2:	f000 fd74 	bl	d5ade <_ZdlPvj>
        return p;
    }
   d4ff6:	4620      	mov	r0, r4
   d4ff8:	b002      	add	sp, #8
   d4ffa:	bd70      	pop	{r4, r5, r6, pc}

000d4ffc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4ffc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4ffe:	b510      	push	{r4, lr}
      if (_M_empty())
   d5000:	b90a      	cbnz	r2, d5006 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5002:	f000 fd70 	bl	d5ae6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d5006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d500a:	68c3      	ldr	r3, [r0, #12]
   d500c:	4718      	bx	r3

000d500e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d500e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5010:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d5012:	f100 0110 	add.w	r1, r0, #16
   d5016:	f7ff fff1 	bl	d4ffc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d501a:	bd08      	pop	{r3, pc}

000d501c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d501c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d501e:	b510      	push	{r4, lr}
      if (_M_empty())
   d5020:	b90a      	cbnz	r2, d5026 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5022:	f000 fd60 	bl	d5ae6 <_ZSt25__throw_bad_function_callv>
    }
   d5026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d502a:	68c3      	ldr	r3, [r0, #12]
   d502c:	4718      	bx	r3

000d502e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d502e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5030:	6800      	ldr	r0, [r0, #0]
   d5032:	f100 0110 	add.w	r1, r0, #16
   d5036:	f7ff fff1 	bl	d501c <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d503a:	bd08      	pop	{r3, pc}

000d503c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d503c:	b538      	push	{r3, r4, r5, lr}
   d503e:	2300      	movs	r3, #0
   d5040:	4604      	mov	r4, r0
   d5042:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5044:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5046:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5048:	f7ff f823 	bl	d4092 <_Znwj>
   d504c:	b128      	cbz	r0, d505a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d504e:	2301      	movs	r3, #1
   d5050:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5054:	4b02      	ldr	r3, [pc, #8]	; (d5060 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5056:	6003      	str	r3, [r0, #0]
   d5058:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d505a:	6020      	str	r0, [r4, #0]
	}
   d505c:	4620      	mov	r0, r4
   d505e:	bd38      	pop	{r3, r4, r5, pc}
   d5060:	000d5e04 	.word	0x000d5e04

000d5064 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d5064:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5066:	2300      	movs	r3, #0
   d5068:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d506a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d506c:	4604      	mov	r4, r0
   d506e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5070:	b12b      	cbz	r3, d507e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5072:	2202      	movs	r2, #2
   d5074:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5076:	68eb      	ldr	r3, [r5, #12]
   d5078:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d507a:	68ab      	ldr	r3, [r5, #8]
   d507c:	60a3      	str	r3, [r4, #8]
    }
   d507e:	4620      	mov	r0, r4
   d5080:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5084 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d5084:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5086:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5088:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d508a:	4668      	mov	r0, sp
   d508c:	f7ff ff60 	bl	d4f50 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5090:	f04f 0302 	mov.w	r3, #2
   d5094:	e8d4 2f4f 	ldrexb	r2, [r4]
   d5098:	2a00      	cmp	r2, #0
   d509a:	d103      	bne.n	d50a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d509c:	e8c4 3f41 	strexb	r1, r3, [r4]
   d50a0:	2900      	cmp	r1, #0
   d50a2:	d1f7      	bne.n	d5094 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d50a4:	d125      	bne.n	d50f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d50a6:	f104 050c 	add.w	r5, r4, #12
   d50aa:	4669      	mov	r1, sp
   d50ac:	4628      	mov	r0, r5
   d50ae:	f7ff ff4f 	bl	d4f50 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d50b2:	f3bf 8f5b 	dmb	ish
   d50b6:	2301      	movs	r3, #1
   d50b8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d50ba:	2000      	movs	r0, #0
   d50bc:	f104 0308 	add.w	r3, r4, #8
   d50c0:	f3bf 8f5b 	dmb	ish
   d50c4:	e853 6f00 	ldrex	r6, [r3]
   d50c8:	e843 0200 	strex	r2, r0, [r3]
   d50cc:	2a00      	cmp	r2, #0
   d50ce:	d1f9      	bne.n	d50c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d50d0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d50d4:	b16e      	cbz	r6, d50f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d50d6:	f7ff fbf3 	bl	d48c0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d50da:	b178      	cbz	r0, d50fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d50dc:	4629      	mov	r1, r5
   d50de:	4630      	mov	r0, r6
   d50e0:	f7ff ff8c 	bl	d4ffc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d50e4:	4630      	mov	r0, r6
   d50e6:	f7ff fdc8 	bl	d4c7a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d50ea:	2110      	movs	r1, #16
   d50ec:	4630      	mov	r0, r6
   d50ee:	f000 fcf6 	bl	d5ade <_ZdlPvj>
        p_->setError(std::move(error));
   d50f2:	4668      	mov	r0, sp
   d50f4:	f7ff ff39 	bl	d4f6a <_ZN8particle5ErrorD1Ev>
    }
   d50f8:	b009      	add	sp, #36	; 0x24
   d50fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d50fc:	4631      	mov	r1, r6
   d50fe:	a802      	add	r0, sp, #8
   d5100:	f7ff ffb0 	bl	d5064 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5104:	68e0      	ldr	r0, [r4, #12]
   d5106:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d510a:	b108      	cbz	r0, d5110 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d510c:	f000 fd44 	bl	d5b98 <strdup>
        type_(type) {
   d5110:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5112:	2010      	movs	r0, #16
   d5114:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5118:	f7fe ffbb 	bl	d4092 <_Znwj>
   d511c:	4605      	mov	r5, r0
   d511e:	b1e8      	cbz	r0, d515c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d5120:	2700      	movs	r7, #0
   d5122:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5124:	2018      	movs	r0, #24
   d5126:	f7fe ffb4 	bl	d4092 <_Znwj>
   d512a:	4604      	mov	r4, r0
   d512c:	b188      	cbz	r0, d5152 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d512e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d5130:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5132:	a802      	add	r0, sp, #8
   d5134:	f7ff fdb1 	bl	d4c9a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5138:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d513a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d513c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d513e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5140:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5142:	a906      	add	r1, sp, #24
   d5144:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5146:	60e3      	str	r3, [r4, #12]
   d5148:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d514c:	9205      	str	r2, [sp, #20]
   d514e:	f7ff feff 	bl	d4f50 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d5152:	4b08      	ldr	r3, [pc, #32]	; (d5174 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d5154:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5156:	4b08      	ldr	r3, [pc, #32]	; (d5178 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5158:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d515a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d515c:	a806      	add	r0, sp, #24
   d515e:	f7ff ff04 	bl	d4f6a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5162:	a802      	add	r0, sp, #8
   d5164:	f7ff fd89 	bl	d4c7a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5168:	2200      	movs	r2, #0
   d516a:	4629      	mov	r1, r5
   d516c:	4803      	ldr	r0, [pc, #12]	; (d517c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d516e:	f7ff fbaf 	bl	d48d0 <application_thread_invoke>
   d5172:	e7b7      	b.n	d50e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d5174:	000d500f 	.word	0x000d500f
   d5178:	000d52a5 	.word	0x000d52a5
   d517c:	000d57a1 	.word	0x000d57a1

000d5180 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5184:	b08a      	sub	sp, #40	; 0x28
   d5186:	4605      	mov	r5, r0
   d5188:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d518c:	460c      	mov	r4, r1
   d518e:	4617      	mov	r7, r2
   d5190:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5192:	f7ff fc19 	bl	d49c8 <spark_cloud_flag_connected>
   d5196:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d5198:	4682      	mov	sl, r0
   d519a:	bb38      	cbnz	r0, d51ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d519c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d51a0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d51a2:	a905      	add	r1, sp, #20
   d51a4:	4630      	mov	r0, r6
   d51a6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d51aa:	f7ff fed1 	bl	d4f50 <_ZN8particle5ErrorC1EOS0_>
   d51ae:	2014      	movs	r0, #20
   d51b0:	f7fe ff6f 	bl	d4092 <_Znwj>
   d51b4:	4604      	mov	r4, r0
   d51b6:	b148      	cbz	r0, d51cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d51b8:	2302      	movs	r3, #2
   d51ba:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d51bc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d51be:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d51c2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d51c4:	4631      	mov	r1, r6
   d51c6:	300c      	adds	r0, #12
   d51c8:	f7ff fec2 	bl	d4f50 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d51cc:	4628      	mov	r0, r5
	: __shared_count(__p)
   d51ce:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d51d0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d51d4:	f7ff ff32 	bl	d503c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d51d8:	4630      	mov	r0, r6
   d51da:	f7ff fec6 	bl	d4f6a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d51de:	a805      	add	r0, sp, #20
   d51e0:	f7ff fec3 	bl	d4f6a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d51e4:	4628      	mov	r0, r5
   d51e6:	b00a      	add	sp, #40	; 0x28
   d51e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d51ec:	230c      	movs	r3, #12
   d51ee:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d51f2:	2014      	movs	r0, #20
   d51f4:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d51f8:	9307      	str	r3, [sp, #28]
   d51fa:	f7fe ff4a 	bl	d4092 <_Znwj>
   d51fe:	4601      	mov	r1, r0
   d5200:	b128      	cbz	r0, d520e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5202:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d5206:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d520a:	f880 a001 	strb.w	sl, [r0, #1]
   d520e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5210:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d5212:	f7ff ff13 	bl	d503c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d5216:	4b22      	ldr	r3, [pc, #136]	; (d52a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d5218:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d521a:	2008      	movs	r0, #8
   d521c:	f7fe ff39 	bl	d4092 <_Znwj>
   d5220:	4682      	mov	sl, r0
   d5222:	b128      	cbz	r0, d5230 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5224:	9b03      	ldr	r3, [sp, #12]
   d5226:	f840 3b04 	str.w	r3, [r0], #4
   d522a:	a904      	add	r1, sp, #16
   d522c:	f7ff fd2e 	bl	d4c8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5230:	9600      	str	r6, [sp, #0]
   d5232:	fa5f f389 	uxtb.w	r3, r9
   d5236:	4642      	mov	r2, r8
   d5238:	4639      	mov	r1, r7
   d523a:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d523c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5240:	f7ff fbca 	bl	d49d8 <spark_send_event>
   d5244:	b9b8      	cbnz	r0, d5276 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d5246:	9b03      	ldr	r3, [sp, #12]
   d5248:	785b      	ldrb	r3, [r3, #1]
   d524a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d524e:	b993      	cbnz	r3, d5276 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d5250:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d5254:	a905      	add	r1, sp, #20
   d5256:	a803      	add	r0, sp, #12
   d5258:	9205      	str	r2, [sp, #20]
   d525a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d525e:	f7ff ff11 	bl	d5084 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5262:	a805      	add	r0, sp, #20
   d5264:	f7ff fe81 	bl	d4f6a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5268:	a805      	add	r0, sp, #20
   d526a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d526c:	f7ff fea7 	bl	d4fbe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d5270:	a806      	add	r0, sp, #24
   d5272:	f7fe ffc3 	bl	d41fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5276:	9b03      	ldr	r3, [sp, #12]
   d5278:	9305      	str	r3, [sp, #20]
   d527a:	a904      	add	r1, sp, #16
   d527c:	a806      	add	r0, sp, #24
   d527e:	f7ff fd05 	bl	d4c8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5282:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5284:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5286:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d5288:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d528a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d528c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d528e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d5290:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d5292:	f7fe ffb3 	bl	d41fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5296:	a804      	add	r0, sp, #16
   d5298:	f7fe ffb0 	bl	d41fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d529c:	e7a2      	b.n	d51e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d529e:	bf00      	nop
   d52a0:	000d5369 	.word	0x000d5369

000d52a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d52a4:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d52a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d52a8:	4605      	mov	r5, r0
	  switch (__op)
   d52aa:	d007      	beq.n	d52bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d52ac:	2a03      	cmp	r2, #3
   d52ae:	d018      	beq.n	d52e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d52b0:	2a01      	cmp	r2, #1
   d52b2:	d101      	bne.n	d52b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d52b4:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d52b6:	6003      	str	r3, [r0, #0]
	}
   d52b8:	2000      	movs	r0, #0
   d52ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d52bc:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d52be:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d52c0:	f7fe fee7 	bl	d4092 <_Znwj>
   d52c4:	4604      	mov	r4, r0
   d52c6:	b150      	cbz	r0, d52de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d52c8:	4631      	mov	r1, r6
   d52ca:	f7ff fecb 	bl	d5064 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d52ce:	6930      	ldr	r0, [r6, #16]
   d52d0:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d52d4:	b108      	cbz	r0, d52da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d52d6:	f000 fc5f 	bl	d5b98 <strdup>
        type_(type) {
   d52da:	6120      	str	r0, [r4, #16]
   d52dc:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d52de:	602c      	str	r4, [r5, #0]
	}
   d52e0:	e7ea      	b.n	d52b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d52e2:	6804      	ldr	r4, [r0, #0]
   d52e4:	2c00      	cmp	r4, #0
   d52e6:	d0e7      	beq.n	d52b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d52e8:	f104 0010 	add.w	r0, r4, #16
   d52ec:	f7ff fe3d 	bl	d4f6a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d52f0:	4620      	mov	r0, r4
   d52f2:	f7ff fcc2 	bl	d4c7a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d52f6:	2118      	movs	r1, #24
   d52f8:	4620      	mov	r0, r4
   d52fa:	f000 fbf0 	bl	d5ade <_ZdlPvj>
   d52fe:	e7db      	b.n	d52b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d5300 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d5300:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5302:	2300      	movs	r3, #0
   d5304:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5306:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5308:	4604      	mov	r4, r0
   d530a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d530c:	b12b      	cbz	r3, d531a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d530e:	2202      	movs	r2, #2
   d5310:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5312:	68eb      	ldr	r3, [r5, #12]
   d5314:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5316:	68ab      	ldr	r3, [r5, #8]
   d5318:	60a3      	str	r3, [r4, #8]
    }
   d531a:	4620      	mov	r0, r4
   d531c:	bd38      	pop	{r3, r4, r5, pc}

000d531e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d531e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5320:	b570      	push	{r4, r5, r6, lr}
   d5322:	4604      	mov	r4, r0
	  switch (__op)
   d5324:	d007      	beq.n	d5336 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d5326:	2a03      	cmp	r2, #3
   d5328:	d012      	beq.n	d5350 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d532a:	2a01      	cmp	r2, #1
   d532c:	d101      	bne.n	d5332 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d532e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5330:	6003      	str	r3, [r0, #0]
	}
   d5332:	2000      	movs	r0, #0
   d5334:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5336:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d5338:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d533a:	f7fe feaa 	bl	d4092 <_Znwj>
   d533e:	4605      	mov	r5, r0
   d5340:	b120      	cbz	r0, d534c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d5342:	4631      	mov	r1, r6
   d5344:	f7ff ffdc 	bl	d5300 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5348:	7c33      	ldrb	r3, [r6, #16]
   d534a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d534c:	6025      	str	r5, [r4, #0]
	}
   d534e:	e7f0      	b.n	d5332 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5350:	6804      	ldr	r4, [r0, #0]
   d5352:	2c00      	cmp	r4, #0
   d5354:	d0ed      	beq.n	d5332 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d5356:	4620      	mov	r0, r4
   d5358:	f7ff fc8f 	bl	d4c7a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d535c:	2114      	movs	r1, #20
   d535e:	4620      	mov	r0, r4
   d5360:	f000 fbbd 	bl	d5ade <_ZdlPvj>
   d5364:	e7e5      	b.n	d5332 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d5368 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5368:	b5f0      	push	{r4, r5, r6, r7, lr}
   d536a:	b089      	sub	sp, #36	; 0x24
   d536c:	4604      	mov	r4, r0
   d536e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5370:	a801      	add	r0, sp, #4
   d5372:	4611      	mov	r1, r2
   d5374:	f7ff fe23 	bl	d4fbe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5378:	b1a4      	cbz	r4, d53a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d537a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d537c:	b11d      	cbz	r5, d5386 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d537e:	4628      	mov	r0, r5
   d5380:	f000 fc0a 	bl	d5b98 <strdup>
   d5384:	4605      	mov	r5, r0
   d5386:	a801      	add	r0, sp, #4
   d5388:	a903      	add	r1, sp, #12
        type_(type) {
   d538a:	9503      	str	r5, [sp, #12]
   d538c:	f8ad 4010 	strh.w	r4, [sp, #16]
   d5390:	f7ff fe78 	bl	d5084 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5394:	a803      	add	r0, sp, #12
   d5396:	f7ff fde8 	bl	d4f6a <_ZN8particle5ErrorD1Ev>
   d539a:	a802      	add	r0, sp, #8
   d539c:	f7fe ff2e 	bl	d41fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d53a0:	b009      	add	sp, #36	; 0x24
   d53a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d53a4:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d53a6:	2301      	movs	r3, #1
   d53a8:	e8d5 2f4f 	ldrexb	r2, [r5]
   d53ac:	2a00      	cmp	r2, #0
   d53ae:	d103      	bne.n	d53b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d53b0:	e8c5 3f41 	strexb	r1, r3, [r5]
   d53b4:	2900      	cmp	r1, #0
   d53b6:	d1f7      	bne.n	d53a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d53b8:	d1ef      	bne.n	d539a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d53ba:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d53bc:	f3bf 8f5b 	dmb	ish
   d53c0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d53c2:	1d2b      	adds	r3, r5, #4
   d53c4:	f3bf 8f5b 	dmb	ish
   d53c8:	e853 6f00 	ldrex	r6, [r3]
   d53cc:	e843 4200 	strex	r2, r4, [r3]
   d53d0:	2a00      	cmp	r2, #0
   d53d2:	d1f9      	bne.n	d53c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d53d4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d53d8:	2e00      	cmp	r6, #0
   d53da:	d0de      	beq.n	d539a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d53dc:	4620      	mov	r0, r4
   d53de:	f7ff fa6f 	bl	d48c0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d53e2:	4607      	mov	r7, r0
   d53e4:	b160      	cbz	r0, d5400 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d53e6:	f105 010c 	add.w	r1, r5, #12
   d53ea:	4630      	mov	r0, r6
   d53ec:	f7ff fe16 	bl	d501c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d53f0:	4630      	mov	r0, r6
   d53f2:	f7ff fc42 	bl	d4c7a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d53f6:	2110      	movs	r1, #16
   d53f8:	4630      	mov	r0, r6
   d53fa:	f000 fb70 	bl	d5ade <_ZdlPvj>
   d53fe:	e7cc      	b.n	d539a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5400:	4631      	mov	r1, r6
   d5402:	a803      	add	r0, sp, #12
   d5404:	f7ff ff7c 	bl	d5300 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5408:	7b2b      	ldrb	r3, [r5, #12]
   d540a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d540e:	2010      	movs	r0, #16
   d5410:	f7fe fe3f 	bl	d4092 <_Znwj>
   d5414:	4605      	mov	r5, r0
   d5416:	b1d0      	cbz	r0, d544e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d5418:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d541a:	2014      	movs	r0, #20
   d541c:	f7fe fe39 	bl	d4092 <_Znwj>
   d5420:	4604      	mov	r4, r0
   d5422:	b178      	cbz	r0, d5444 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d5424:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5426:	4601      	mov	r1, r0
   d5428:	a803      	add	r0, sp, #12
   d542a:	f7ff fc36 	bl	d4c9a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d542e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5430:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5432:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5434:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d5436:	9205      	str	r2, [sp, #20]
   d5438:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d543a:	60e3      	str	r3, [r4, #12]
   d543c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d5440:	9206      	str	r2, [sp, #24]
   d5442:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d5444:	4b06      	ldr	r3, [pc, #24]	; (d5460 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d5446:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5448:	4b06      	ldr	r3, [pc, #24]	; (d5464 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d544a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d544c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d544e:	a803      	add	r0, sp, #12
   d5450:	f7ff fc13 	bl	d4c7a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5454:	2200      	movs	r2, #0
   d5456:	4629      	mov	r1, r5
   d5458:	4803      	ldr	r0, [pc, #12]	; (d5468 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d545a:	f7ff fa39 	bl	d48d0 <application_thread_invoke>
   d545e:	e7c7      	b.n	d53f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d5460:	000d502f 	.word	0x000d502f
   d5464:	000d531f 	.word	0x000d531f
   d5468:	000d57a1 	.word	0x000d57a1

000d546c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d546c:	4770      	bx	lr

000d546e <_ZN9IPAddressD0Ev>:
   d546e:	b510      	push	{r4, lr}
   d5470:	2118      	movs	r1, #24
   d5472:	4604      	mov	r4, r0
   d5474:	f000 fb33 	bl	d5ade <_ZdlPvj>
   d5478:	4620      	mov	r0, r4
   d547a:	bd10      	pop	{r4, pc}

000d547c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d547c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d547e:	7d03      	ldrb	r3, [r0, #20]
   d5480:	2b06      	cmp	r3, #6
{
   d5482:	b08d      	sub	sp, #52	; 0x34
   d5484:	460e      	mov	r6, r1
   d5486:	f100 0704 	add.w	r7, r0, #4
   d548a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d548e:	d012      	beq.n	d54b6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d5490:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5494:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5498:	220a      	movs	r2, #10
   d549a:	4630      	mov	r0, r6
   d549c:	f7ff fc69 	bl	d4d72 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d54a0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d54a2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d54a4:	d019      	beq.n	d54da <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d54a6:	2c00      	cmp	r4, #0
   d54a8:	d0f4      	beq.n	d5494 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d54aa:	212e      	movs	r1, #46	; 0x2e
   d54ac:	4630      	mov	r0, r6
   d54ae:	f7ff fc47 	bl	d4d40 <_ZN5Print5printEc>
   d54b2:	4404      	add	r4, r0
   d54b4:	e7ee      	b.n	d5494 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d54b6:	232f      	movs	r3, #47	; 0x2f
   d54b8:	466a      	mov	r2, sp
   d54ba:	4639      	mov	r1, r7
   d54bc:	200a      	movs	r0, #10
		buf[0] = 0;
   d54be:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d54c2:	f7ff f91d 	bl	d4700 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d54c6:	4668      	mov	r0, sp
   d54c8:	f000 fb83 	bl	d5bd2 <strlen>
   d54cc:	6833      	ldr	r3, [r6, #0]
   d54ce:	4602      	mov	r2, r0
   d54d0:	68db      	ldr	r3, [r3, #12]
   d54d2:	4669      	mov	r1, sp
   d54d4:	4630      	mov	r0, r6
   d54d6:	4798      	blx	r3
   d54d8:	4604      	mov	r4, r0
    }
    return n;
}
   d54da:	4620      	mov	r0, r4
   d54dc:	b00d      	add	sp, #52	; 0x34
   d54de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d54e0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d54e0:	b510      	push	{r4, lr}
   d54e2:	4b05      	ldr	r3, [pc, #20]	; (d54f8 <_ZN9IPAddressC1Ev+0x18>)
   d54e4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d54e6:	2211      	movs	r2, #17
   d54e8:	f840 3b04 	str.w	r3, [r0], #4
   d54ec:	2100      	movs	r1, #0
   d54ee:	f000 fb1d 	bl	d5b2c <memset>
}
   d54f2:	4620      	mov	r0, r4
   d54f4:	bd10      	pop	{r4, pc}
   d54f6:	bf00      	nop
   d54f8:	000d5e20 	.word	0x000d5e20

000d54fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d54fc:	4603      	mov	r3, r0
   d54fe:	4a07      	ldr	r2, [pc, #28]	; (d551c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5500:	b510      	push	{r4, lr}
   d5502:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5506:	f101 0210 	add.w	r2, r1, #16
   d550a:	f851 4b04 	ldr.w	r4, [r1], #4
   d550e:	f843 4b04 	str.w	r4, [r3], #4
   d5512:	4291      	cmp	r1, r2
   d5514:	d1f9      	bne.n	d550a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5516:	780a      	ldrb	r2, [r1, #0]
   d5518:	701a      	strb	r2, [r3, #0]
}
   d551a:	bd10      	pop	{r4, pc}
   d551c:	000d5e20 	.word	0x000d5e20

000d5520 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5520:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5522:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5526:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d552a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d552e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5532:	2304      	movs	r3, #4
   d5534:	6041      	str	r1, [r0, #4]
   d5536:	7503      	strb	r3, [r0, #20]
}
   d5538:	bd10      	pop	{r4, pc}
	...

000d553c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d553c:	b513      	push	{r0, r1, r4, lr}
   d553e:	4b05      	ldr	r3, [pc, #20]	; (d5554 <_ZN9IPAddressC1EPKh+0x18>)
   d5540:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d5542:	78cb      	ldrb	r3, [r1, #3]
   d5544:	9300      	str	r3, [sp, #0]
   d5546:	788b      	ldrb	r3, [r1, #2]
   d5548:	784a      	ldrb	r2, [r1, #1]
   d554a:	7809      	ldrb	r1, [r1, #0]
   d554c:	f7ff ffe8 	bl	d5520 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5550:	b002      	add	sp, #8
   d5552:	bd10      	pop	{r4, pc}
   d5554:	000d5e20 	.word	0x000d5e20

000d5558 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5558:	7441      	strb	r1, [r0, #17]
}
   d555a:	4770      	bx	lr

000d555c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d555c:	4770      	bx	lr

000d555e <_ZN9USBSerial4readEv>:
{
   d555e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5560:	2100      	movs	r1, #0
   d5562:	7c00      	ldrb	r0, [r0, #16]
   d5564:	f7ff f984 	bl	d4870 <HAL_USB_USART_Receive_Data>
}
   d5568:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d556c:	bd08      	pop	{r3, pc}

000d556e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d556e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5570:	2101      	movs	r1, #1
   d5572:	7c00      	ldrb	r0, [r0, #16]
   d5574:	f7ff f97c 	bl	d4870 <HAL_USB_USART_Receive_Data>
}
   d5578:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d557c:	bd08      	pop	{r3, pc}

000d557e <_ZN9USBSerial17availableForWriteEv>:
{
   d557e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5580:	7c00      	ldrb	r0, [r0, #16]
   d5582:	f7ff f96d 	bl	d4860 <HAL_USB_USART_Available_Data_For_Write>
}
   d5586:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d558a:	bd08      	pop	{r3, pc}

000d558c <_ZN9USBSerial9availableEv>:
{
   d558c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d558e:	7c00      	ldrb	r0, [r0, #16]
   d5590:	f7ff f95e 	bl	d4850 <HAL_USB_USART_Available_Data>
}
   d5594:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5598:	bd08      	pop	{r3, pc}

000d559a <_ZN9USBSerial5writeEh>:
{
   d559a:	b513      	push	{r0, r1, r4, lr}
   d559c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d559e:	7c00      	ldrb	r0, [r0, #16]
{
   d55a0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d55a2:	f7ff f95d 	bl	d4860 <HAL_USB_USART_Available_Data_For_Write>
   d55a6:	2800      	cmp	r0, #0
   d55a8:	9901      	ldr	r1, [sp, #4]
   d55aa:	dc01      	bgt.n	d55b0 <_ZN9USBSerial5writeEh+0x16>
   d55ac:	7c60      	ldrb	r0, [r4, #17]
   d55ae:	b120      	cbz	r0, d55ba <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d55b0:	7c20      	ldrb	r0, [r4, #16]
   d55b2:	f7ff f965 	bl	d4880 <HAL_USB_USART_Send_Data>
   d55b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d55ba:	b002      	add	sp, #8
   d55bc:	bd10      	pop	{r4, pc}

000d55be <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d55be:	7c00      	ldrb	r0, [r0, #16]
   d55c0:	f7ff b966 	b.w	d4890 <HAL_USB_USART_Flush_Data>

000d55c4 <_ZN9USBSerialD0Ev>:
   d55c4:	b510      	push	{r4, lr}
   d55c6:	2114      	movs	r1, #20
   d55c8:	4604      	mov	r4, r0
   d55ca:	f000 fa88 	bl	d5ade <_ZdlPvj>
   d55ce:	4620      	mov	r0, r4
   d55d0:	bd10      	pop	{r4, pc}
	...

000d55d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d55d4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d55d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d55da:	4604      	mov	r4, r0
   d55dc:	4608      	mov	r0, r1
   d55de:	2100      	movs	r1, #0
   d55e0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d55e4:	4b04      	ldr	r3, [pc, #16]	; (d55f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d55e6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d55e8:	2301      	movs	r3, #1
  _serial = serial;
   d55ea:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d55ec:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d55ee:	4611      	mov	r1, r2
   d55f0:	f7ff f926 	bl	d4840 <HAL_USB_USART_Init>
}
   d55f4:	4620      	mov	r0, r4
   d55f6:	bd10      	pop	{r4, pc}
   d55f8:	000d5e34 	.word	0x000d5e34

000d55fc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d55fc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d55fe:	2214      	movs	r2, #20
{
   d5600:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5602:	2100      	movs	r1, #0
   d5604:	f000 fa92 	bl	d5b2c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5608:	4620      	mov	r0, r4
   d560a:	bd10      	pop	{r4, pc}

000d560c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d560c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d560e:	4c10      	ldr	r4, [pc, #64]	; (d5650 <_Z16_fetch_usbserialv+0x44>)
{
   d5610:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5612:	a803      	add	r0, sp, #12
   d5614:	f7ff fff2 	bl	d55fc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5618:	7821      	ldrb	r1, [r4, #0]
   d561a:	f3bf 8f5b 	dmb	ish
   d561e:	f011 0101 	ands.w	r1, r1, #1
   d5622:	d111      	bne.n	d5648 <_Z16_fetch_usbserialv+0x3c>
   d5624:	4620      	mov	r0, r4
   d5626:	9101      	str	r1, [sp, #4]
   d5628:	f7fe fd39 	bl	d409e <__cxa_guard_acquire>
   d562c:	9901      	ldr	r1, [sp, #4]
   d562e:	b158      	cbz	r0, d5648 <_Z16_fetch_usbserialv+0x3c>
   d5630:	aa03      	add	r2, sp, #12
   d5632:	4808      	ldr	r0, [pc, #32]	; (d5654 <_Z16_fetch_usbserialv+0x48>)
   d5634:	f7ff ffce 	bl	d55d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5638:	4620      	mov	r0, r4
   d563a:	f7fe fd35 	bl	d40a8 <__cxa_guard_release>
   d563e:	4a06      	ldr	r2, [pc, #24]	; (d5658 <_Z16_fetch_usbserialv+0x4c>)
   d5640:	4906      	ldr	r1, [pc, #24]	; (d565c <_Z16_fetch_usbserialv+0x50>)
   d5642:	4804      	ldr	r0, [pc, #16]	; (d5654 <_Z16_fetch_usbserialv+0x48>)
   d5644:	f000 fa46 	bl	d5ad4 <__aeabi_atexit>
	return _usbserial;
}
   d5648:	4802      	ldr	r0, [pc, #8]	; (d5654 <_Z16_fetch_usbserialv+0x48>)
   d564a:	b008      	add	sp, #32
   d564c:	bd10      	pop	{r4, pc}
   d564e:	bf00      	nop
   d5650:	2003e78c 	.word	0x2003e78c
   d5654:	2003e790 	.word	0x2003e790
   d5658:	2003e718 	.word	0x2003e718
   d565c:	000d555d 	.word	0x000d555d

000d5660 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5660:	4770      	bx	lr

000d5662 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5662:	7441      	strb	r1, [r0, #17]
}
   d5664:	4770      	bx	lr

000d5666 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5666:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5668:	7c00      	ldrb	r0, [r0, #16]
   d566a:	f7ff f881 	bl	d4770 <hal_usart_available_data_for_write>
}
   d566e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5672:	bd08      	pop	{r3, pc}

000d5674 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5674:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5676:	7c00      	ldrb	r0, [r0, #16]
   d5678:	f7ff f85a 	bl	d4730 <hal_usart_available>
}
   d567c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5680:	bd08      	pop	{r3, pc}

000d5682 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5682:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5684:	7c00      	ldrb	r0, [r0, #16]
   d5686:	f7ff f863 	bl	d4750 <hal_usart_peek>
}
   d568a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d568e:	bd08      	pop	{r3, pc}

000d5690 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5690:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5692:	7c00      	ldrb	r0, [r0, #16]
   d5694:	f7ff f854 	bl	d4740 <hal_usart_read>
}
   d5698:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d569c:	bd08      	pop	{r3, pc}

000d569e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d569e:	7c00      	ldrb	r0, [r0, #16]
   d56a0:	f7ff b85e 	b.w	d4760 <hal_usart_flush>

000d56a4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d56a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d56a6:	7c45      	ldrb	r5, [r0, #17]
{
   d56a8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d56aa:	b12d      	cbz	r5, d56b8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d56ac:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d56ae:	b003      	add	sp, #12
   d56b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d56b4:	f7ff b834 	b.w	d4720 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d56b8:	7c00      	ldrb	r0, [r0, #16]
   d56ba:	9101      	str	r1, [sp, #4]
   d56bc:	f7ff f858 	bl	d4770 <hal_usart_available_data_for_write>
   d56c0:	2800      	cmp	r0, #0
   d56c2:	9901      	ldr	r1, [sp, #4]
   d56c4:	dcf2      	bgt.n	d56ac <_ZN11USARTSerial5writeEh+0x8>
}
   d56c6:	4628      	mov	r0, r5
   d56c8:	b003      	add	sp, #12
   d56ca:	bd30      	pop	{r4, r5, pc}

000d56cc <_ZN11USARTSerialD0Ev>:
   d56cc:	b510      	push	{r4, lr}
   d56ce:	2114      	movs	r1, #20
   d56d0:	4604      	mov	r4, r0
   d56d2:	f000 fa04 	bl	d5ade <_ZdlPvj>
   d56d6:	4620      	mov	r0, r4
   d56d8:	bd10      	pop	{r4, pc}
	...

000d56dc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d56dc:	b510      	push	{r4, lr}
   d56de:	f04f 0c00 	mov.w	ip, #0
   d56e2:	4604      	mov	r4, r0
   d56e4:	4608      	mov	r0, r1
   d56e6:	4611      	mov	r1, r2
   d56e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d56ec:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d56f0:	4a04      	ldr	r2, [pc, #16]	; (d5704 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d56f2:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d56f4:	2201      	movs	r2, #1
  _serial = serial;
   d56f6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d56f8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d56fa:	461a      	mov	r2, r3
   d56fc:	f7ff f808 	bl	d4710 <hal_usart_init>
}
   d5700:	4620      	mov	r0, r4
   d5702:	bd10      	pop	{r4, pc}
   d5704:	000d5e64 	.word	0x000d5e64

000d5708 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d5708:	7c00      	ldrb	r0, [r0, #16]
   d570a:	2300      	movs	r3, #0
   d570c:	f7ff b838 	b.w	d4780 <hal_usart_begin_config>

000d5710 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d5710:	2200      	movs	r2, #0
   d5712:	f7ff bff9 	b.w	d5708 <_ZN11USARTSerial5beginEmm>
	...

000d5718 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d571a:	4c1b      	ldr	r4, [pc, #108]	; (d5788 <_Z22__fetch_global_Serial1v+0x70>)
   d571c:	6826      	ldr	r6, [r4, #0]
   d571e:	b94e      	cbnz	r6, d5734 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d5720:	2084      	movs	r0, #132	; 0x84
   d5722:	f7fe fcb6 	bl	d4092 <_Znwj>
   d5726:	4605      	mov	r5, r0
   d5728:	b118      	cbz	r0, d5732 <_Z22__fetch_global_Serial1v+0x1a>
   d572a:	2284      	movs	r2, #132	; 0x84
   d572c:	4631      	mov	r1, r6
   d572e:	f000 f9fd 	bl	d5b2c <memset>
   d5732:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d5734:	4d15      	ldr	r5, [pc, #84]	; (d578c <_Z22__fetch_global_Serial1v+0x74>)
   d5736:	682f      	ldr	r7, [r5, #0]
   d5738:	b94f      	cbnz	r7, d574e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d573a:	2084      	movs	r0, #132	; 0x84
   d573c:	f7fe fca9 	bl	d4092 <_Znwj>
   d5740:	4606      	mov	r6, r0
   d5742:	b118      	cbz	r0, d574c <_Z22__fetch_global_Serial1v+0x34>
   d5744:	2284      	movs	r2, #132	; 0x84
   d5746:	4639      	mov	r1, r7
   d5748:	f000 f9f0 	bl	d5b2c <memset>
   d574c:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d574e:	4e10      	ldr	r6, [pc, #64]	; (d5790 <_Z22__fetch_global_Serial1v+0x78>)
   d5750:	7831      	ldrb	r1, [r6, #0]
   d5752:	f3bf 8f5b 	dmb	ish
   d5756:	f011 0101 	ands.w	r1, r1, #1
   d575a:	d112      	bne.n	d5782 <_Z22__fetch_global_Serial1v+0x6a>
   d575c:	4630      	mov	r0, r6
   d575e:	9101      	str	r1, [sp, #4]
   d5760:	f7fe fc9d 	bl	d409e <__cxa_guard_acquire>
   d5764:	9901      	ldr	r1, [sp, #4]
   d5766:	b160      	cbz	r0, d5782 <_Z22__fetch_global_Serial1v+0x6a>
   d5768:	6822      	ldr	r2, [r4, #0]
   d576a:	682b      	ldr	r3, [r5, #0]
   d576c:	4809      	ldr	r0, [pc, #36]	; (d5794 <_Z22__fetch_global_Serial1v+0x7c>)
   d576e:	f7ff ffb5 	bl	d56dc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5772:	4630      	mov	r0, r6
   d5774:	f7fe fc98 	bl	d40a8 <__cxa_guard_release>
   d5778:	4a07      	ldr	r2, [pc, #28]	; (d5798 <_Z22__fetch_global_Serial1v+0x80>)
   d577a:	4908      	ldr	r1, [pc, #32]	; (d579c <_Z22__fetch_global_Serial1v+0x84>)
   d577c:	4805      	ldr	r0, [pc, #20]	; (d5794 <_Z22__fetch_global_Serial1v+0x7c>)
   d577e:	f000 f9a9 	bl	d5ad4 <__aeabi_atexit>
#endif
	return serial1;
}
   d5782:	4804      	ldr	r0, [pc, #16]	; (d5794 <_Z22__fetch_global_Serial1v+0x7c>)
   d5784:	b003      	add	sp, #12
   d5786:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5788:	2003e7a8 	.word	0x2003e7a8
   d578c:	2003e7ac 	.word	0x2003e7ac
   d5790:	2003e7a4 	.word	0x2003e7a4
   d5794:	2003e7b0 	.word	0x2003e7b0
   d5798:	2003e718 	.word	0x2003e718
   d579c:	000d5661 	.word	0x000d5661

000d57a0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d57a0:	b510      	push	{r4, lr}
      if (_M_empty())
   d57a2:	6883      	ldr	r3, [r0, #8]
   d57a4:	4604      	mov	r4, r0
   d57a6:	b90b      	cbnz	r3, d57ac <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d57a8:	f000 f99d 	bl	d5ae6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d57ac:	68c3      	ldr	r3, [r0, #12]
   d57ae:	4798      	blx	r3
      if (_M_manager)
   d57b0:	68a3      	ldr	r3, [r4, #8]
   d57b2:	b11b      	cbz	r3, d57bc <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d57b4:	2203      	movs	r2, #3
   d57b6:	4621      	mov	r1, r4
   d57b8:	4620      	mov	r0, r4
   d57ba:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d57bc:	4620      	mov	r0, r4
   d57be:	2110      	movs	r1, #16
}
   d57c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d57c4:	f000 b98b 	b.w	d5ade <_ZdlPvj>

000d57c8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d57c8:	4770      	bx	lr

000d57ca <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d57ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d57cc:	4606      	mov	r6, r0
   d57ce:	4615      	mov	r5, r2
   d57d0:	460c      	mov	r4, r1
   d57d2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d57d4:	42bc      	cmp	r4, r7
   d57d6:	d006      	beq.n	d57e6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d57d8:	6833      	ldr	r3, [r6, #0]
   d57da:	f814 1b01 	ldrb.w	r1, [r4], #1
   d57de:	689b      	ldr	r3, [r3, #8]
   d57e0:	4630      	mov	r0, r6
   d57e2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d57e4:	e7f6      	b.n	d57d4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d57e6:	4628      	mov	r0, r5
   d57e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d57ea <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d57ea:	7c00      	ldrb	r0, [r0, #16]
   d57ec:	2200      	movs	r2, #0
   d57ee:	f7fe bff7 	b.w	d47e0 <hal_i2c_write>

000d57f2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d57f2:	7c00      	ldrb	r0, [r0, #16]
   d57f4:	2100      	movs	r1, #0
   d57f6:	f7fe bffb 	b.w	d47f0 <hal_i2c_available>

000d57fa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d57fa:	7c00      	ldrb	r0, [r0, #16]
   d57fc:	2100      	movs	r1, #0
   d57fe:	f7fe bfff 	b.w	d4800 <hal_i2c_read>

000d5802 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5802:	7c00      	ldrb	r0, [r0, #16]
   d5804:	2100      	movs	r1, #0
   d5806:	f7ff b803 	b.w	d4810 <hal_i2c_peek>

000d580a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d580a:	7c00      	ldrb	r0, [r0, #16]
   d580c:	2100      	movs	r1, #0
   d580e:	f7ff b807 	b.w	d4820 <hal_i2c_flush>

000d5812 <_ZN7TwoWireD0Ev>:
   d5812:	b510      	push	{r4, lr}
   d5814:	2114      	movs	r1, #20
   d5816:	4604      	mov	r4, r0
   d5818:	f000 f961 	bl	d5ade <_ZdlPvj>
   d581c:	4620      	mov	r0, r4
   d581e:	bd10      	pop	{r4, pc}

000d5820 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5820:	b510      	push	{r4, lr}
   d5822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5826:	4604      	mov	r4, r0
   d5828:	4608      	mov	r0, r1
   d582a:	2100      	movs	r1, #0
   d582c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5830:	4b03      	ldr	r3, [pc, #12]	; (d5840 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5832:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5834:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5836:	4611      	mov	r1, r2
   d5838:	f7fe fffa 	bl	d4830 <hal_i2c_init>
}
   d583c:	4620      	mov	r0, r4
   d583e:	bd10      	pop	{r4, pc}
   d5840:	000d5e94 	.word	0x000d5e94

000d5844 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d5844:	7c00      	ldrb	r0, [r0, #16]
   d5846:	2200      	movs	r2, #0
   d5848:	f7fe bfa2 	b.w	d4790 <hal_i2c_set_speed>

000d584c <_ZN7TwoWire12stretchClockEb>:
  hal_i2c_stretch_clock(_i2c, stretch, NULL);
   d584c:	7c00      	ldrb	r0, [r0, #16]
   d584e:	2200      	movs	r2, #0
   d5850:	f7fe bfa6 	b.w	d47a0 <hal_i2c_stretch_clock>

000d5854 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5854:	2300      	movs	r3, #0
   d5856:	7c00      	ldrb	r0, [r0, #16]
   d5858:	461a      	mov	r2, r3
   d585a:	4619      	mov	r1, r3
   d585c:	f7fe bfa8 	b.w	d47b0 <hal_i2c_begin>

000d5860 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d5860:	7c00      	ldrb	r0, [r0, #16]
   d5862:	2200      	movs	r2, #0
   d5864:	f7fe bfac 	b.w	d47c0 <hal_i2c_begin_transmission>

000d5868 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d5868:	7c00      	ldrb	r0, [r0, #16]
   d586a:	2200      	movs	r2, #0
   d586c:	f7fe bfb0 	b.w	d47d0 <hal_i2c_end_transmission>

000d5870 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d5870:	2101      	movs	r1, #1
   d5872:	f7ff bff9 	b.w	d5868 <_ZN7TwoWire15endTransmissionEh>

000d5876 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5876:	2200      	movs	r2, #0
   d5878:	6840      	ldr	r0, [r0, #4]
   d587a:	4611      	mov	r1, r2
   d587c:	f7ff b85c 	b.w	d4938 <network_ready>

000d5880 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5880:	2200      	movs	r2, #0
   d5882:	6840      	ldr	r0, [r0, #4]
   d5884:	4611      	mov	r1, r2
   d5886:	f7ff b877 	b.w	d4978 <network_listening>

000d588a <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d588a:	2200      	movs	r2, #0
   d588c:	6840      	ldr	r0, [r0, #4]
   d588e:	4611      	mov	r1, r2
   d5890:	f7ff b882 	b.w	d4998 <network_get_listen_timeout>

000d5894 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5894:	6840      	ldr	r0, [r0, #4]
   d5896:	2200      	movs	r2, #0
   d5898:	f7ff b876 	b.w	d4988 <network_set_listen_timeout>

000d589c <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d589c:	6840      	ldr	r0, [r0, #4]
   d589e:	2200      	movs	r2, #0
   d58a0:	f081 0101 	eor.w	r1, r1, #1
   d58a4:	f7ff b860 	b.w	d4968 <network_listen>

000d58a8 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d58a8:	2300      	movs	r3, #0
   d58aa:	6840      	ldr	r0, [r0, #4]
   d58ac:	461a      	mov	r2, r3
   d58ae:	4619      	mov	r1, r3
   d58b0:	f7ff b852 	b.w	d4958 <network_off>

000d58b4 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d58b4:	2200      	movs	r2, #0
   d58b6:	6840      	ldr	r0, [r0, #4]
   d58b8:	4611      	mov	r1, r2
   d58ba:	f7ff b82d 	b.w	d4918 <network_connecting>

000d58be <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d58be:	6840      	ldr	r0, [r0, #4]
   d58c0:	2200      	movs	r2, #0
   d58c2:	2102      	movs	r1, #2
   d58c4:	f7ff b830 	b.w	d4928 <network_disconnect>

000d58c8 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d58c8:	2300      	movs	r3, #0
   d58ca:	6840      	ldr	r0, [r0, #4]
   d58cc:	461a      	mov	r2, r3
   d58ce:	f7ff b81b 	b.w	d4908 <network_connect>
	...

000d58d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d58d4:	4b02      	ldr	r3, [pc, #8]	; (d58e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d58d6:	2204      	movs	r2, #4
   d58d8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d58da:	4a02      	ldr	r2, [pc, #8]	; (d58e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d58dc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d58de:	4770      	bx	lr
   d58e0:	2003e7c4 	.word	0x2003e7c4
   d58e4:	000d5ebc 	.word	0x000d5ebc

000d58e8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d58e8:	2300      	movs	r3, #0
   d58ea:	6840      	ldr	r0, [r0, #4]
   d58ec:	461a      	mov	r2, r3
   d58ee:	f7ff b80b 	b.w	d4908 <network_connect>

000d58f2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d58f2:	6840      	ldr	r0, [r0, #4]
   d58f4:	2200      	movs	r2, #0
   d58f6:	2102      	movs	r1, #2
   d58f8:	f7ff b816 	b.w	d4928 <network_disconnect>

000d58fc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d58fc:	2200      	movs	r2, #0
   d58fe:	6840      	ldr	r0, [r0, #4]
   d5900:	4611      	mov	r1, r2
   d5902:	f7ff b809 	b.w	d4918 <network_connecting>

000d5906 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5906:	2200      	movs	r2, #0
   d5908:	6840      	ldr	r0, [r0, #4]
   d590a:	4611      	mov	r1, r2
   d590c:	f7ff b814 	b.w	d4938 <network_ready>

000d5910 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5910:	2300      	movs	r3, #0
   d5912:	6840      	ldr	r0, [r0, #4]
   d5914:	461a      	mov	r2, r3
   d5916:	4619      	mov	r1, r3
   d5918:	f7ff b816 	b.w	d4948 <network_on>

000d591c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d591c:	2300      	movs	r3, #0
   d591e:	6840      	ldr	r0, [r0, #4]
   d5920:	461a      	mov	r2, r3
   d5922:	4619      	mov	r1, r3
   d5924:	f7ff b818 	b.w	d4958 <network_off>

000d5928 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5928:	6840      	ldr	r0, [r0, #4]
   d592a:	2100      	movs	r1, #0
   d592c:	f7ff b83c 	b.w	d49a8 <network_is_on>

000d5930 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5930:	6840      	ldr	r0, [r0, #4]
   d5932:	2100      	movs	r1, #0
   d5934:	f7ff b840 	b.w	d49b8 <network_is_off>

000d5938 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5938:	6840      	ldr	r0, [r0, #4]
   d593a:	2200      	movs	r2, #0
   d593c:	f081 0101 	eor.w	r1, r1, #1
   d5940:	f7ff b812 	b.w	d4968 <network_listen>

000d5944 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5944:	6840      	ldr	r0, [r0, #4]
   d5946:	2200      	movs	r2, #0
   d5948:	f7ff b81e 	b.w	d4988 <network_set_listen_timeout>

000d594c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d594c:	2200      	movs	r2, #0
   d594e:	6840      	ldr	r0, [r0, #4]
   d5950:	4611      	mov	r1, r2
   d5952:	f7ff b821 	b.w	d4998 <network_get_listen_timeout>

000d5956 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5956:	2200      	movs	r2, #0
   d5958:	6840      	ldr	r0, [r0, #4]
   d595a:	4611      	mov	r1, r2
   d595c:	f7ff b80c 	b.w	d4978 <network_listening>

000d5960 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5964:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5966:	b095      	sub	sp, #84	; 0x54
   d5968:	4616      	mov	r6, r2
   d596a:	460d      	mov	r5, r1
   d596c:	4607      	mov	r7, r0
    IPAddress addr;
   d596e:	f7ff fdb7 	bl	d54e0 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5972:	4621      	mov	r1, r4
   d5974:	2218      	movs	r2, #24
   d5976:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5978:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d597a:	f000 f8d7 	bl	d5b2c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d597e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5980:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5984:	4621      	mov	r1, r4
   d5986:	466b      	mov	r3, sp
   d5988:	aa0c      	add	r2, sp, #48	; 0x30
   d598a:	4630      	mov	r0, r6
   d598c:	f7fe fe88 	bl	d46a0 <netdb_getaddrinfo>
    if (!r) {
   d5990:	4604      	mov	r4, r0
   d5992:	2800      	cmp	r0, #0
   d5994:	d14c      	bne.n	d5a30 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5996:	4602      	mov	r2, r0
   d5998:	2101      	movs	r1, #1
   d599a:	6868      	ldr	r0, [r5, #4]
   d599c:	f7fe ffcc 	bl	d4938 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d59a0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d59a2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d59a4:	4622      	mov	r2, r4
   d59a6:	6868      	ldr	r0, [r5, #4]
   d59a8:	f7fe ffc6 	bl	d4938 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d59ac:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d59ae:	4681      	mov	r9, r0
        bool ok = false;
   d59b0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d59b2:	2e00      	cmp	r6, #0
   d59b4:	d03c      	beq.n	d5a30 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d59b6:	2900      	cmp	r1, #0
   d59b8:	d13a      	bne.n	d5a30 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d59ba:	6873      	ldr	r3, [r6, #4]
   d59bc:	2b02      	cmp	r3, #2
   d59be:	d003      	beq.n	d59c8 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d59c0:	2b0a      	cmp	r3, #10
   d59c2:	d011      	beq.n	d59e8 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d59c4:	69f6      	ldr	r6, [r6, #28]
   d59c6:	e7f4      	b.n	d59b2 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d59c8:	f1b8 0f00 	cmp.w	r8, #0
   d59cc:	d00a      	beq.n	d59e4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d59ce:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d59d0:	a806      	add	r0, sp, #24
   d59d2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d59d4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d59d6:	f7ff fdb1 	bl	d553c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d59da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d59dc:	1d3c      	adds	r4, r7, #4
   d59de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d59e0:	682b      	ldr	r3, [r5, #0]
   d59e2:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d59e4:	4641      	mov	r1, r8
   d59e6:	e7ed      	b.n	d59c4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d59e8:	f1b9 0f00 	cmp.w	r9, #0
   d59ec:	d101      	bne.n	d59f2 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d59ee:	4649      	mov	r1, r9
   d59f0:	e7e8      	b.n	d59c4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d59f2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d59f4:	2210      	movs	r2, #16
   d59f6:	a801      	add	r0, sp, #4
   d59f8:	f000 f898 	bl	d5b2c <memset>
                    a.v = 6;
   d59fc:	2306      	movs	r3, #6
   d59fe:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5a02:	ad01      	add	r5, sp, #4
   d5a04:	f104 0308 	add.w	r3, r4, #8
   d5a08:	3418      	adds	r4, #24
   d5a0a:	6818      	ldr	r0, [r3, #0]
   d5a0c:	6859      	ldr	r1, [r3, #4]
   d5a0e:	462a      	mov	r2, r5
   d5a10:	c203      	stmia	r2!, {r0, r1}
   d5a12:	3308      	adds	r3, #8
   d5a14:	42a3      	cmp	r3, r4
   d5a16:	4615      	mov	r5, r2
   d5a18:	d1f7      	bne.n	d5a0a <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d5a1a:	a901      	add	r1, sp, #4
   d5a1c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5a1e:	ad07      	add	r5, sp, #28
   d5a20:	f7ff fd6c 	bl	d54fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5a26:	1d3c      	adds	r4, r7, #4
   d5a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5a2a:	682b      	ldr	r3, [r5, #0]
   d5a2c:	7023      	strb	r3, [r4, #0]
   d5a2e:	e7de      	b.n	d59ee <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5a30:	9800      	ldr	r0, [sp, #0]
   d5a32:	f7fe fe2d 	bl	d4690 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5a36:	4638      	mov	r0, r7
   d5a38:	b015      	add	sp, #84	; 0x54
   d5a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5a40 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5a40:	4b02      	ldr	r3, [pc, #8]	; (d5a4c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5a42:	4a03      	ldr	r2, [pc, #12]	; (d5a50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5a44:	601a      	str	r2, [r3, #0]
   d5a46:	2200      	movs	r2, #0
   d5a48:	605a      	str	r2, [r3, #4]

} // spark
   d5a4a:	4770      	bx	lr
   d5a4c:	2003e7cc 	.word	0x2003e7cc
   d5a50:	000d5ef8 	.word	0x000d5ef8

000d5a54 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d5a54:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5a56:	2300      	movs	r3, #0
   d5a58:	2520      	movs	r5, #32
   d5a5a:	8043      	strh	r3, [r0, #2]
   d5a5c:	2314      	movs	r3, #20
{
   d5a5e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5a60:	8003      	strh	r3, [r0, #0]
   d5a62:	6085      	str	r5, [r0, #8]
   d5a64:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5a66:	4906      	ldr	r1, [pc, #24]	; (d5a80 <_Z17acquireWireBufferv+0x2c>)
   d5a68:	4628      	mov	r0, r5
   d5a6a:	f000 f83a 	bl	d5ae2 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5a6e:	4904      	ldr	r1, [pc, #16]	; (d5a80 <_Z17acquireWireBufferv+0x2c>)
	};
   d5a70:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5a72:	4628      	mov	r0, r5
   d5a74:	f000 f835 	bl	d5ae2 <_ZnajRKSt9nothrow_t>
	};
   d5a78:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d5a7a:	4620      	mov	r0, r4
   d5a7c:	bd38      	pop	{r3, r4, r5, pc}
   d5a7e:	bf00      	nop
   d5a80:	000d5f2c 	.word	0x000d5f2c

000d5a84 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5a84:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5a86:	4d0f      	ldr	r5, [pc, #60]	; (d5ac4 <_Z19__fetch_global_Wirev+0x40>)
   d5a88:	7829      	ldrb	r1, [r5, #0]
   d5a8a:	f3bf 8f5b 	dmb	ish
   d5a8e:	f011 0401 	ands.w	r4, r1, #1
{
   d5a92:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5a94:	d113      	bne.n	d5abe <_Z19__fetch_global_Wirev+0x3a>
   d5a96:	4628      	mov	r0, r5
   d5a98:	f7fe fb01 	bl	d409e <__cxa_guard_acquire>
   d5a9c:	b178      	cbz	r0, d5abe <_Z19__fetch_global_Wirev+0x3a>
   d5a9e:	a801      	add	r0, sp, #4
   d5aa0:	f7ff ffd8 	bl	d5a54 <_Z17acquireWireBufferv>
   d5aa4:	aa01      	add	r2, sp, #4
   d5aa6:	4621      	mov	r1, r4
   d5aa8:	4807      	ldr	r0, [pc, #28]	; (d5ac8 <_Z19__fetch_global_Wirev+0x44>)
   d5aaa:	f7ff feb9 	bl	d5820 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5aae:	4628      	mov	r0, r5
   d5ab0:	f7fe fafa 	bl	d40a8 <__cxa_guard_release>
   d5ab4:	4a05      	ldr	r2, [pc, #20]	; (d5acc <_Z19__fetch_global_Wirev+0x48>)
   d5ab6:	4906      	ldr	r1, [pc, #24]	; (d5ad0 <_Z19__fetch_global_Wirev+0x4c>)
   d5ab8:	4803      	ldr	r0, [pc, #12]	; (d5ac8 <_Z19__fetch_global_Wirev+0x44>)
   d5aba:	f000 f80b 	bl	d5ad4 <__aeabi_atexit>
	return wire;
}
   d5abe:	4802      	ldr	r0, [pc, #8]	; (d5ac8 <_Z19__fetch_global_Wirev+0x44>)
   d5ac0:	b007      	add	sp, #28
   d5ac2:	bd30      	pop	{r4, r5, pc}
   d5ac4:	2003e7d8 	.word	0x2003e7d8
   d5ac8:	2003e7dc 	.word	0x2003e7dc
   d5acc:	2003e718 	.word	0x2003e718
   d5ad0:	000d57c9 	.word	0x000d57c9

000d5ad4 <__aeabi_atexit>:
   d5ad4:	460b      	mov	r3, r1
   d5ad6:	4601      	mov	r1, r0
   d5ad8:	4618      	mov	r0, r3
   d5ada:	f000 b80b 	b.w	d5af4 <__cxa_atexit>

000d5ade <_ZdlPvj>:
   d5ade:	f7fe badc 	b.w	d409a <_ZdlPv>

000d5ae2 <_ZnajRKSt9nothrow_t>:
   d5ae2:	f7fe bad8 	b.w	d4096 <_Znaj>

000d5ae6 <_ZSt25__throw_bad_function_callv>:
   d5ae6:	b508      	push	{r3, lr}
   d5ae8:	f7fe ff9e 	bl	d4a28 <abort>

000d5aec <atoi>:
   d5aec:	220a      	movs	r2, #10
   d5aee:	2100      	movs	r1, #0
   d5af0:	f000 b8f2 	b.w	d5cd8 <strtol>

000d5af4 <__cxa_atexit>:
   d5af4:	b510      	push	{r4, lr}
   d5af6:	4c05      	ldr	r4, [pc, #20]	; (d5b0c <__cxa_atexit+0x18>)
   d5af8:	4613      	mov	r3, r2
   d5afa:	b12c      	cbz	r4, d5b08 <__cxa_atexit+0x14>
   d5afc:	460a      	mov	r2, r1
   d5afe:	4601      	mov	r1, r0
   d5b00:	2002      	movs	r0, #2
   d5b02:	f3af 8000 	nop.w
   d5b06:	bd10      	pop	{r4, pc}
   d5b08:	4620      	mov	r0, r4
   d5b0a:	e7fc      	b.n	d5b06 <__cxa_atexit+0x12>
   d5b0c:	00000000 	.word	0x00000000

000d5b10 <memcpy>:
   d5b10:	440a      	add	r2, r1
   d5b12:	4291      	cmp	r1, r2
   d5b14:	f100 33ff 	add.w	r3, r0, #4294967295
   d5b18:	d100      	bne.n	d5b1c <memcpy+0xc>
   d5b1a:	4770      	bx	lr
   d5b1c:	b510      	push	{r4, lr}
   d5b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5b22:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5b26:	4291      	cmp	r1, r2
   d5b28:	d1f9      	bne.n	d5b1e <memcpy+0xe>
   d5b2a:	bd10      	pop	{r4, pc}

000d5b2c <memset>:
   d5b2c:	4402      	add	r2, r0
   d5b2e:	4603      	mov	r3, r0
   d5b30:	4293      	cmp	r3, r2
   d5b32:	d100      	bne.n	d5b36 <memset+0xa>
   d5b34:	4770      	bx	lr
   d5b36:	f803 1b01 	strb.w	r1, [r3], #1
   d5b3a:	e7f9      	b.n	d5b30 <memset+0x4>

000d5b3c <srand>:
   d5b3c:	b538      	push	{r3, r4, r5, lr}
   d5b3e:	4b0d      	ldr	r3, [pc, #52]	; (d5b74 <srand+0x38>)
   d5b40:	681d      	ldr	r5, [r3, #0]
   d5b42:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5b44:	4604      	mov	r4, r0
   d5b46:	b97b      	cbnz	r3, d5b68 <srand+0x2c>
   d5b48:	2018      	movs	r0, #24
   d5b4a:	f7fe ff55 	bl	d49f8 <malloc>
   d5b4e:	4a0a      	ldr	r2, [pc, #40]	; (d5b78 <srand+0x3c>)
   d5b50:	4b0a      	ldr	r3, [pc, #40]	; (d5b7c <srand+0x40>)
   d5b52:	63a8      	str	r0, [r5, #56]	; 0x38
   d5b54:	e9c0 2300 	strd	r2, r3, [r0]
   d5b58:	4b09      	ldr	r3, [pc, #36]	; (d5b80 <srand+0x44>)
   d5b5a:	6083      	str	r3, [r0, #8]
   d5b5c:	230b      	movs	r3, #11
   d5b5e:	8183      	strh	r3, [r0, #12]
   d5b60:	2201      	movs	r2, #1
   d5b62:	2300      	movs	r3, #0
   d5b64:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5b68:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5b6a:	2200      	movs	r2, #0
   d5b6c:	611c      	str	r4, [r3, #16]
   d5b6e:	615a      	str	r2, [r3, #20]
   d5b70:	bd38      	pop	{r3, r4, r5, pc}
   d5b72:	bf00      	nop
   d5b74:	2003e6b4 	.word	0x2003e6b4
   d5b78:	abcd330e 	.word	0xabcd330e
   d5b7c:	e66d1234 	.word	0xe66d1234
   d5b80:	0005deec 	.word	0x0005deec

000d5b84 <strcmp>:
   d5b84:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5b88:	f811 3b01 	ldrb.w	r3, [r1], #1
   d5b8c:	2a01      	cmp	r2, #1
   d5b8e:	bf28      	it	cs
   d5b90:	429a      	cmpcs	r2, r3
   d5b92:	d0f7      	beq.n	d5b84 <strcmp>
   d5b94:	1ad0      	subs	r0, r2, r3
   d5b96:	4770      	bx	lr

000d5b98 <strdup>:
   d5b98:	4b02      	ldr	r3, [pc, #8]	; (d5ba4 <strdup+0xc>)
   d5b9a:	4601      	mov	r1, r0
   d5b9c:	6818      	ldr	r0, [r3, #0]
   d5b9e:	f000 b803 	b.w	d5ba8 <_strdup_r>
   d5ba2:	bf00      	nop
   d5ba4:	2003e6b4 	.word	0x2003e6b4

000d5ba8 <_strdup_r>:
   d5ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5baa:	4604      	mov	r4, r0
   d5bac:	4608      	mov	r0, r1
   d5bae:	460d      	mov	r5, r1
   d5bb0:	f000 f80f 	bl	d5bd2 <strlen>
   d5bb4:	1c42      	adds	r2, r0, #1
   d5bb6:	4611      	mov	r1, r2
   d5bb8:	4620      	mov	r0, r4
   d5bba:	9201      	str	r2, [sp, #4]
   d5bbc:	f7fe ff3c 	bl	d4a38 <_malloc_r>
   d5bc0:	4604      	mov	r4, r0
   d5bc2:	b118      	cbz	r0, d5bcc <_strdup_r+0x24>
   d5bc4:	9a01      	ldr	r2, [sp, #4]
   d5bc6:	4629      	mov	r1, r5
   d5bc8:	f7ff ffa2 	bl	d5b10 <memcpy>
   d5bcc:	4620      	mov	r0, r4
   d5bce:	b003      	add	sp, #12
   d5bd0:	bd30      	pop	{r4, r5, pc}

000d5bd2 <strlen>:
   d5bd2:	4603      	mov	r3, r0
   d5bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5bd8:	2a00      	cmp	r2, #0
   d5bda:	d1fb      	bne.n	d5bd4 <strlen+0x2>
   d5bdc:	1a18      	subs	r0, r3, r0
   d5bde:	3801      	subs	r0, #1
   d5be0:	4770      	bx	lr
	...

000d5be4 <_strtol_l.isra.0>:
   d5be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5be8:	4e3a      	ldr	r6, [pc, #232]	; (d5cd4 <_strtol_l.isra.0+0xf0>)
   d5bea:	4686      	mov	lr, r0
   d5bec:	468c      	mov	ip, r1
   d5bee:	4660      	mov	r0, ip
   d5bf0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d5bf4:	5da5      	ldrb	r5, [r4, r6]
   d5bf6:	f015 0508 	ands.w	r5, r5, #8
   d5bfa:	d1f8      	bne.n	d5bee <_strtol_l.isra.0+0xa>
   d5bfc:	2c2d      	cmp	r4, #45	; 0x2d
   d5bfe:	d133      	bne.n	d5c68 <_strtol_l.isra.0+0x84>
   d5c00:	f89c 4000 	ldrb.w	r4, [ip]
   d5c04:	f04f 0801 	mov.w	r8, #1
   d5c08:	f100 0c02 	add.w	ip, r0, #2
   d5c0c:	2b00      	cmp	r3, #0
   d5c0e:	d05c      	beq.n	d5cca <_strtol_l.isra.0+0xe6>
   d5c10:	2b10      	cmp	r3, #16
   d5c12:	d10c      	bne.n	d5c2e <_strtol_l.isra.0+0x4a>
   d5c14:	2c30      	cmp	r4, #48	; 0x30
   d5c16:	d10a      	bne.n	d5c2e <_strtol_l.isra.0+0x4a>
   d5c18:	f89c 0000 	ldrb.w	r0, [ip]
   d5c1c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d5c20:	2858      	cmp	r0, #88	; 0x58
   d5c22:	d14d      	bne.n	d5cc0 <_strtol_l.isra.0+0xdc>
   d5c24:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d5c28:	2310      	movs	r3, #16
   d5c2a:	f10c 0c02 	add.w	ip, ip, #2
   d5c2e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d5c32:	3f01      	subs	r7, #1
   d5c34:	2600      	movs	r6, #0
   d5c36:	fbb7 f9f3 	udiv	r9, r7, r3
   d5c3a:	4630      	mov	r0, r6
   d5c3c:	fb03 7a19 	mls	sl, r3, r9, r7
   d5c40:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d5c44:	2d09      	cmp	r5, #9
   d5c46:	d818      	bhi.n	d5c7a <_strtol_l.isra.0+0x96>
   d5c48:	462c      	mov	r4, r5
   d5c4a:	42a3      	cmp	r3, r4
   d5c4c:	dd24      	ble.n	d5c98 <_strtol_l.isra.0+0xb4>
   d5c4e:	1c75      	adds	r5, r6, #1
   d5c50:	d007      	beq.n	d5c62 <_strtol_l.isra.0+0x7e>
   d5c52:	4581      	cmp	r9, r0
   d5c54:	d31d      	bcc.n	d5c92 <_strtol_l.isra.0+0xae>
   d5c56:	d101      	bne.n	d5c5c <_strtol_l.isra.0+0x78>
   d5c58:	45a2      	cmp	sl, r4
   d5c5a:	db1a      	blt.n	d5c92 <_strtol_l.isra.0+0xae>
   d5c5c:	fb00 4003 	mla	r0, r0, r3, r4
   d5c60:	2601      	movs	r6, #1
   d5c62:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d5c66:	e7eb      	b.n	d5c40 <_strtol_l.isra.0+0x5c>
   d5c68:	2c2b      	cmp	r4, #43	; 0x2b
   d5c6a:	bf08      	it	eq
   d5c6c:	f89c 4000 	ldrbeq.w	r4, [ip]
   d5c70:	46a8      	mov	r8, r5
   d5c72:	bf08      	it	eq
   d5c74:	f100 0c02 	addeq.w	ip, r0, #2
   d5c78:	e7c8      	b.n	d5c0c <_strtol_l.isra.0+0x28>
   d5c7a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d5c7e:	2d19      	cmp	r5, #25
   d5c80:	d801      	bhi.n	d5c86 <_strtol_l.isra.0+0xa2>
   d5c82:	3c37      	subs	r4, #55	; 0x37
   d5c84:	e7e1      	b.n	d5c4a <_strtol_l.isra.0+0x66>
   d5c86:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d5c8a:	2d19      	cmp	r5, #25
   d5c8c:	d804      	bhi.n	d5c98 <_strtol_l.isra.0+0xb4>
   d5c8e:	3c57      	subs	r4, #87	; 0x57
   d5c90:	e7db      	b.n	d5c4a <_strtol_l.isra.0+0x66>
   d5c92:	f04f 36ff 	mov.w	r6, #4294967295
   d5c96:	e7e4      	b.n	d5c62 <_strtol_l.isra.0+0x7e>
   d5c98:	1c73      	adds	r3, r6, #1
   d5c9a:	d106      	bne.n	d5caa <_strtol_l.isra.0+0xc6>
   d5c9c:	2322      	movs	r3, #34	; 0x22
   d5c9e:	f8ce 3000 	str.w	r3, [lr]
   d5ca2:	4638      	mov	r0, r7
   d5ca4:	b942      	cbnz	r2, d5cb8 <_strtol_l.isra.0+0xd4>
   d5ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5caa:	f1b8 0f00 	cmp.w	r8, #0
   d5cae:	d000      	beq.n	d5cb2 <_strtol_l.isra.0+0xce>
   d5cb0:	4240      	negs	r0, r0
   d5cb2:	2a00      	cmp	r2, #0
   d5cb4:	d0f7      	beq.n	d5ca6 <_strtol_l.isra.0+0xc2>
   d5cb6:	b10e      	cbz	r6, d5cbc <_strtol_l.isra.0+0xd8>
   d5cb8:	f10c 31ff 	add.w	r1, ip, #4294967295
   d5cbc:	6011      	str	r1, [r2, #0]
   d5cbe:	e7f2      	b.n	d5ca6 <_strtol_l.isra.0+0xc2>
   d5cc0:	2430      	movs	r4, #48	; 0x30
   d5cc2:	2b00      	cmp	r3, #0
   d5cc4:	d1b3      	bne.n	d5c2e <_strtol_l.isra.0+0x4a>
   d5cc6:	2308      	movs	r3, #8
   d5cc8:	e7b1      	b.n	d5c2e <_strtol_l.isra.0+0x4a>
   d5cca:	2c30      	cmp	r4, #48	; 0x30
   d5ccc:	d0a4      	beq.n	d5c18 <_strtol_l.isra.0+0x34>
   d5cce:	230a      	movs	r3, #10
   d5cd0:	e7ad      	b.n	d5c2e <_strtol_l.isra.0+0x4a>
   d5cd2:	bf00      	nop
   d5cd4:	000d5f2e 	.word	0x000d5f2e

000d5cd8 <strtol>:
   d5cd8:	4613      	mov	r3, r2
   d5cda:	460a      	mov	r2, r1
   d5cdc:	4601      	mov	r1, r0
   d5cde:	4802      	ldr	r0, [pc, #8]	; (d5ce8 <strtol+0x10>)
   d5ce0:	6800      	ldr	r0, [r0, #0]
   d5ce2:	f7ff bf7f 	b.w	d5be4 <_strtol_l.isra.0>
   d5ce6:	bf00      	nop
   d5ce8:	2003e6b4 	.word	0x2003e6b4

000d5cec <dynalib_user>:
   d5cec:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d5cfc:	00000000 65726353 54206e65 72656d69     ....Screen Timer
   d5d0c:	696e4920 77410074 69746961 4420676e      Init.Awaiting D
   d5d1c:	00617461 6e20724f 6544206f 65636976     ata.Or no Device
   d5d2c:	6d200073 00206e69 20766544 55206e69     s. min .Dev in U
   d5d3c:	44006573 63697665 764f2065 69747265     se.Device Overti
   d5d4c:	4c00656d 74696d69 61655220 64656863     me.Limit Reached
   d5d5c:	72724500 6920726f 6553206e 6c616972     .Error in Serial
   d5d6c:	6c655320 69746365 00006e6f               Selection..

000d5d78 <_ZTV17LiquidCrystal_I2C>:
	...
   d5d80:	000d4455 000d4457 000d4523 000d4ce9     UD..WD..#E...L..
   d5d90:	00000000 00000040 00000014 00000054     ....@.......T...

000d5da0 <_ZTVN5spark13EthernetClassE>:
	...
   d5da8:	000d4ab7 000d4aad 000d4aa3 000d4a99     .J...J...J...J..
   d5db8:	000d4a8d 000d4a81 000d5929 000d5931     .J...J..)Y..1Y..
   d5dc8:	000d4a75 000d4a6d 000d4a63 000d4a59     uJ..mJ..cJ..YJ..
   d5dd8:	000d5961 00707061 252d5925 64252d6d     aY..app.%Y-%m-%d
   d5de8:	3a482554 253a4d25 007a2553 74637361     T%H:%M:%S%z.asct
   d5df8:	00656d69                                ime.

000d5dfc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5e04:	000d4f35 000d4f3b 000d4f79 000d4f49     5O..;O..yO..IO..
   d5e14:	000d4f37                                7O..

000d5e18 <_ZTV9IPAddress>:
	...
   d5e20:	000d547d 000d546d 000d546f              }T..mT..oT..

000d5e2c <_ZTV9USBSerial>:
	...
   d5e34:	000d555d 000d55c5 000d559b 000d4ce9     ]U...U...U...L..
   d5e44:	000d558d 000d555f 000d556f 000d55bf     .U.._U..oU...U..
   d5e54:	000d557f 000d5559                       .U..YU..

000d5e5c <_ZTV11USARTSerial>:
	...
   d5e64:	000d5661 000d56cd 000d56a5 000d4ce9     aV...V...V...L..
   d5e74:	000d5675 000d5691 000d5683 000d569f     uV...V...V...V..
   d5e84:	000d5663 000d5667                       cV..gV..

000d5e8c <_ZTV7TwoWire>:
	...
   d5e94:	000d57c9 000d5813 000d57eb 000d57cb     .W...X...W...W..
   d5ea4:	000d57f3 000d57fb 000d5803 000d580b     .W...W...X...X..

000d5eb4 <_ZTVN5spark9WiFiClassE>:
	...
   d5ebc:	000d58c9 000d58bf 000d58b5 000d5877     .X...X...X..wX..
   d5ecc:	000d4daf 000d58a9 000d5929 000d5931     .M...X..)Y..1Y..
   d5edc:	000d589d 000d5895 000d588b 000d5881     .X...X...X...X..
   d5eec:	000d5961                                aY..

000d5ef0 <_ZTVN5spark12NetworkClassE>:
	...
   d5ef8:	000d58e9 000d58f3 000d58fd 000d5907     .X...X...X...Y..
   d5f08:	000d5911 000d591d 000d5929 000d5931     .Y...Y..)Y..1Y..
   d5f18:	000d5939 000d5945 000d594d 000d5957     9Y..EY..MY..WY..
   d5f28:	000d5961                                aY..

000d5f2c <_ZSt7nothrow>:
	...

000d5f2d <_ctype_>:
   d5f2d:	20202000 20202020 28282020 20282828     .         ((((( 
   d5f3d:	20202020 20202020 20202020 20202020                     
   d5f4d:	10108820 10101010 10101010 10101010      ...............
   d5f5d:	04040410 04040404 10040404 10101010     ................
   d5f6d:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d5f7d:	01010101 01010101 01010101 10101010     ................
   d5f8d:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d5f9d:	02020202 02020202 02020202 10101010     ................
   d5fad:	00000020 00000000 00000000 00000000      ...............
	...

000d602e <link_const_variable_data_end>:
	...

000d6030 <link_constructors_location>:
   d6030:	000d4449 	.word	0x000d4449
   d6034:	000d4ac1 	.word	0x000d4ac1
   d6038:	000d4af5 	.word	0x000d4af5
   d603c:	000d4cc1 	.word	0x000d4cc1
   d6040:	000d4dbd 	.word	0x000d4dbd
   d6044:	000d4dcd 	.word	0x000d4dcd
   d6048:	000d4df5 	.word	0x000d4df5
   d604c:	000d58d5 	.word	0x000d58d5
   d6050:	000d5a41 	.word	0x000d5a41

000d6054 <link_constructors_end>:
	...
